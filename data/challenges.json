[{"title": "Commenting", "instructions": "**Please press the Start button to load code into the editor.**\n\nIn `main.js`, there are two messages being printed to the console using `console.log`. Use a single-line comment to prevent the second message from being printed to the console.\n\n# Exit Criteria:\n\n> Exit Criteria is a term commonly used to describe the requirements necessary to complete a project/unit of work. In this case, they describe the work necessary to complete an assignment.\n\n- Prevent the console log on line 5 from running by using a single-line comment.", "tests": "\"describe('your solution', function() {\\n  it('second console.log call should be commented out', function() {\\n    expect($(\\\"#mocha\\\").html()).to.satisfy(function(html)\\n    {\\n        if ( (html.includes( \\\"\\\\/\\\\/console.log('This\\\" ) && html.indexOf(\\\"\\\\/\\\\/console.log('This\\\") < 1152 ) \\n            || (html.includes( \\\"\\\\/\\\\/ console.log('This\\\" ) && html.indexOf(\\\"\\\\/\\\\/ console.log('This\\\") < 1152) ){ return true }\\n    }, 'You have not commented out the the second console.log');\\n });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"// Leave the line below uncommented\\nconsole.log('This should print to the console');\\n\\n// Comment the line below so that it does not run\\nconsole.log('This should not print to the console.');\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779d6"}, {"title": "Statements: Declaring Variables", "instructions": "In `main.js`, add the three variables described in the exit criteria below.\n\n# Exit Criteria:\n\n- Declare a variable named `y`.\n- Declare two variables named `zee` and `zed` using the multiple variable syntax.", "tests": "\"describe('your solution', function() {\\n  it('variable y should be declared', () => {\\n    expect(y).to.be.undefined;\\n  });\\n  it('variables zee and zed should be declared', () => {\\n    expect(zee).to.be.undefined;\\n    expect(zed).to.be.undefined;\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Here we're declaring a variable with the name x\\nvar x;\\n\\n// Declare your variables below\\n\\n\\n// Don't change code below this\\nconsole.log(x);\\nconsole.log(y);\\nconsole.log(zee, zed);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779d8"}, {"title": "Statements: Assignment", "instructions": "In `main.js`, add the new variable described in the exit criteria.\n\n# Exit Criteria:\n\n- Create a variable called `y` and assign the value `5`.", "tests": "\"describe('your solution', function() {\\n  it('variable y should be declared', () => {\\n    expect(y).not.to.be.undefined;\\n  });\\n  it('y should be equal to 5', () => {\\n    expect(y).to.equal(5);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Here we're declaring and assigning the variable x to 10\\nvar x = 10;\\n\\n// Define your variable below\\n\\n\\n// Don't change code below\\nconsole.log(x);\\nconsole.log(y);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779da"}, {"title": "Statements: Case-Sensitivity", "instructions": "There is currently a bug in the editor. Use your knowledge of case sensitivity to squash the bug and meet the exit criteria.\n\n# Exit Criteria:\n\n- Fix line 4 in `main.js` to make the tests pass.", "tests": "\"describe('your solution', function() {\\n  it('variableName should be equal to 10', () => {\\n    expect(variableName, 'Make sure you have the correct case!').to.equal(10);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"var variableName;\\n\\n// Update line 4 to properly re-assign 10 to the variableName variable\\nVARIABLENAME = 10;\\n\\n// Don't change the code below\\nconsole.log(variableName)\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779dc"}, {"title": "Expressions: Addition", "instructions": "In the editor, use an addition expression to meet the exit criteria.\n\n# Exit Criteria:\n\n- Declare a variable called `y` and assign to it the result of adding `5` to `10`.\n", "tests": "\"describe('your solution', function() {\\n  it('y should be equal to 15', () => {\\n    expect(y).to.equal(15);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Declare your variable below\\n\\n// Don't change the code below\\nconsole.log(y);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779dd"}, {"title": "Expressions: Variables", "instructions": "In the editor, perform the re-assignments described in the exit criteria below.\n\n# Exit Criteria\n\n- Assign the contents of `y` to `x`.\n- Assign the value `5` to the variable `y`.", "tests": "\"describe('your solution', function() {\\n  it('x should equal 10, y should be equal to 5', () => {\\n    expect(x).to.equal(10);\\n    expect(y).to.equal(5);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"var x;\\nvar y = 10;\\n\\n// Write your code below\\n\\n\\n// Don't change the following code\\nconsole.log(x);\\nconsole.log(y);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779de"}, {"title": "Operators: Math", "instructions": "Use the predefined variables to determine the results for each given mathematical operation.\n\n# Exit Criteria\n\n- Set the value of the variable `sum` to be the result of `x` add `y`.\n- Set the value of the variable `product` to be the result of `x` multiplied by `y`.\n- Set the value of the variable `quotient` to be the result of `y` divided by `x`.\n- Set the value of the variable `remainder` to be the the remainder of the result of `y` divided by `x`.", "tests": "\"describe('your solution', function() {\\n  it('should_have_sum_of_xy', () => {\\n    expect(sum).to.equal(x + y);\\n  });\\n  it('should_have_product_of_xy', () => {\\n    expect(product).to.equal(x * y);\\n  });\\n  it('should_have_quotient_of_yx', () => {\\n    expect(quotient).to.equal(y / x);\\n  });\\n  it('should_have_remainder_of_yx', () => {\\n    expect(remainder).to.equal(y % x)\\n  });\\n  it('xy_variables_should_not_change', () => {\\n    expect(x).to.equal(3);\\n    expect(y).to.equal(2);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"var x = 3;\\nvar y = 2;\\n\\n// define your variables here\\nvar sum =\\n  var product =\\n    var quotient =\\n      var remainder =\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779df"}, {"title": "Operators: Compound Assignment", "instructions": "In the editor, use compound operators to meet the exit criteria below.\n\n# Exit Criteria:\n\n- Using the compound operators, fix the code so that all variables equal `10`.", "tests": "\"describe('your solution', function() {\\n  it('all variables should equal 10', () => {\\n    expect(a).to.equal(10);\\n    expect(b).to.equal(10);\\n    expect(c).to.equal(10);\\n    expect(d).to.equal(10);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"var a = 2;\\nvar b = 15;\\nvar c = 5;\\nvar d = 20;\\n\\na += 8;\\n\\n// Update the code below\\nb -= 1;\\nc *= 1;\\nd /= 1;\\n\\n// Don't change code below\\nconsole.log(a); // 10\\nconsole.log(b);\\nconsole.log(c);\\nconsole.log(d);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779e0"}, {"title": "Expressions: Math Operations", "instructions": "In the editor, modify the code to meet the exit criteria.\n\n# Exit Criteria:\n\n- Using only parentheses, update the expression so that the value assigned to the variable `result` is `30` instead of `25`.\n", "tests": "\"describe('your solution', function() {\\n  before(function() {\\n\\n  });\\n  after(function() {\\n\\n  });\\n  it('result_should_equal_30', () => {\\n    expect(result).to.equal(30)\\n  });\\n  it('xyz_should_not_be_changed', () => {\\n    expect(x).to.equal(5);\\n    expect(y).to.equal(10);\\n    expect(z).to.equal(2);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"var x = 5;\\nvar y = 10;\\nvar z = 2;\\n\\n// Update the code below using only parenthesis ( )\\nvar result = x + y * z;\\n\\nconsole.log(result);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779e1"}, {"title": "Types: Number", "instructions": "In the editor, enter a value to meet the exit criteria below\n\n# Exit Criteria:\n\n- Set the value of `number` to be any value of the type `Number`.\n", "tests": "\"describe('your solution', function() {\\n  before(function() {\\n\\n  });\\n  after(function() {\\n\\n  });\\n  it('number_should_be_of_type_number', () => {\\n    expect(typeof number).to.equal('number');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"//test\\n// There are many ways to define number values, but all the values are still of the type Number\\nvar int = 1; // 1\\nvar float = .5; // 0.5\\nvar binary = 0b000010; // 2\\nvar hex = 0x0000FF; // 255\\n\\n// Define your variables below\\nvar number = \""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779e2"}, {"title": "Types: String I", "instructions": "In the editor, assign string values to meet the exit criteria below.\n\n# Exit Criteria:\n\n- Declare a variable named `myName` and assign it your name as a `String`.\n- Declare a variable named `favoriteColor` and assign it to equal your favorite color as a `String`.\n", "tests": "\"describe('your solution', function() {\\n  before(function() {\\n\\n  });\\n  after(function() {\\n\\n  });\\n  it('myName_should_be_a_string', () => {\\n    expect(typeof myName).to.equal('string');\\n  });\\n  it('favoriteColor_should_be_a_string', () => {\\n    expect(typeof favoriteColor).to.equal('string');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Update the variables below with strings\\n\\n// Don't change the code below\\nconsole.log(myName);\\nconsole.log(favoriteColor);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779e3"}, {"title": "Types: String II", "instructions": "Write code to meet the exit criteria below:\n\n# Exit Criteria:\n\n- Fix the existing code using escape sequences so that the tests pass.", "tests": "\"describe('your solution', function() {\\n  before(function() {\\n\\n  });\\n  after(function() {\\n\\n  });\\n  it('x_should_be_a_valid_string', () => {\\n    expect(x).to.equal('I\\\\'m ready to go');\\n  });\\n  it('y_should_be_a_valid_string', () => {\\n    expect(y).to.equal(\\\"Don't pet Tom's cat, she's not nice\\\");\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Fix the errors in the code below by adding escaping\\nvar x = 'I'm ready to go';\\nvar y = 'Don't pet Tom's cat, she's not nice';\\n\\n// Don't change the code below\\nconsole.log(x);\\nconsole.log(y);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779e4"}, {"title": "Types: String III", "instructions": "# Exit Criteria:\n\n- Declare a variable named `myName` and assign it your name as a string.\n- Declare a variable named `myFavoriteColor` and assign it your favorite color as a string.\n- Declare a variable named `myStatement` and concatenate `myName`, \" likes the color \" and `myFavoriteColor` together to form a string similar to below:\n\n> \"John likes the color blue\"", "tests": "\"describe('your solution', function() {\\n  before(function() {\\n\\n  });\\n  after(function() {\\n\\n  });\\n  it('myName_should_be_a_string', () => {\\n    expect(typeof myName).to.equal('string');\\n  });\\n  it('myFavoriteColor_should_be_a_string', () => {\\n    expect(typeof myFavoriteColor).to.equal('string');\\n  });\\n  it('myStatement_should_be_valid', () => {\\n    expect(myStatement).to.equal(myName + ' likes the color ' + myFavoriteColor);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"var name = 'Jeff';\\nvar favoriteLanguage = 'Ruby';\\n\\nvar statement = name + ' really likes ' + favoriteLanguage;\\n\\nconsole.log(statement); // \\\"Jeff really likes Ruby\\\"\\n\\n// Define your variables below\\n\\n\\n// Don't change the code below\\nconsole.log(myStatement);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779e5"}, {"title": "Types: String IV", "instructions": "# Exit Criteria:\n\n- Update the `firstNameLength` variable to be the length of the `firstName` value\n", "tests": "\"describe('your solution', function() {\\n  before(function() {\\n\\n  });\\n  after(function() {\\n\\n  });\\n  it('firstNameLength_should_be_the_length_of_firstName', () => {\\n    expect(firstNameLength).to.equal(firstName.length);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"var firstNameLength = 0;\\nvar firstName = 'Brendan';\\n\\n// Update the code below\\nfirstNameLength = firstName;\\n\\nconsole.log(firstNameLength);\""}, {"type": "html", "content": "\"\""}, {"type": "css", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779e6"}, {"title": "Types: String V", "instructions": "# Exit Criteria:\n\n- Declare and assign your first and last name to `firstName` and `lastName`, respectively.\n- Declare a variable named `initials` and assign it the first letter of your first and last name.", "tests": "\"describe('your solution', function() {\\n  before(function() {\\n\\n  });\\n  after(function() {\\n\\n  });\\n  it('initials_should_be_a_string', () => {\\n    expect(typeof initials).to.equal('string');\\n  });\\n  it('initials_should_be_your_first_and_last_initials', () => {\\n    expect(typeof firstName).to.equal('string');\\n    expect(typeof lastName).to.equal('string');\\n    expect(initials).to.equal(firstName[0] + lastName[0]);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\\n// Don't change the code below\\nconsole.log(initials);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779e7"}, {"title": "Types: Array", "instructions": "# Exit Criteria:\n\n- Declare a variable named `groceryList` and assign it an array of three or more strings, each containing an item you would find at a grocery store.\n", "tests": "\"describe('your solution', function() {\\n  it('should declare a groceryList variable containing 3 strings', () => {\\n    expect(groceryList).to.not.be.undefined;\\n    expect(groceryList.length).to.equal(3);\\n    groceryList.forEach(item => expect(typeof item).to.equal('string'));\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Write your code below\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779e8"}, {"title": "Types: Function", "instructions": "# Exit Criteria:\n\n- Define a function named `getFullName` that returns your full name.", "tests": "\"describe('your solution', function() {\\n  before(function() {\\n\\n  });\\n  after(function() {\\n\\n  });\\n  it('getFullName_should_return_a_string', () => {\\n    const result = getFullName();\\n    expect(typeof result).to.equal('string');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function getDaysInWeek() {\\n  return 7;\\n}\\n\\n// Define your function below\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779e9"}, {"title": "Types: Boolean", "instructions": "## Exit Criteria:\n\n- Declare a variable named `x` and assign it the value `true`.\n- Declare a variable named `y` and assign it the value `false`.\n\n\u200b\n", "tests": "\"describe('your solution', function() {\\n  before(function() {\\n\\n  });\\n  after(function() {\\n\\n  });\\n  it('should declare a variable named x and assign it the value `true`', () => {\\n    expect(x).to.not.be.undefined;\\n    expect(x).to.equal(true);\\n  });\\n  it('should declare a variable named y and assign it the value `false`', () => {\\n    expect(y).to.not.be.undefined;\\n    expect(y).to.equal(false);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Define your variables below\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779ea"}, {"title": "Types: Null & Undefined", "instructions": "# Exit Criteria:\n\n- Declare a variable named `nothingHereYet` without assigning a value to it.\n- Declare a variable named `bananaCount` and assign it the value `null`.", "tests": "\"describe('your solution', function() {\\n  before(function() {\\n\\n  });\\n  after(function() {\\n\\n  });\\n  it('should declare a variable named nothingHereYet and not assign a value', () => {\\n   expect(nothingHereYet).to.be.undefined;\\n});\\n  it('should declare a variable named bananaCount and assign it the value null', () => {\\n   expect(bananaCount).to.not.be.undefined;\\n   expect(bananaCount).to.equal(null);\\n});\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Define your variables below\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779eb"}, {"title": "Operators: Comparison", "instructions": "# Exit Criteria:\n\n- Set the variable **canSallyRide** to compare if Sally's height is greater than the **rideHeight**\u200b\n\n- Set the variable **canTomRide** to compare if Tom's height is greater than or equal to the **rideHeight**\n\n- Set the variable **isNickShorterThanMary** to see if Nick's height is less than Mary's height\n", "tests": "\"describe('your solution', function() {\\n  it('canSallyRide_should_be_false', () => {\\n    expect(canSallyRide).to.equal(false);\\n  });\\n  it('canTomRide_should_be_true', () => {\\n    expect(canTomRide).to.equal(true);\\n  });\\n  it('isNickShorterThanMary_should_be_false', () => {\\n    expect(isNickShorterThanMary).to.equal(false);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"var sallyHeight = 122; // 121cm is about 4 feet\\nvar tomHeight = 137; // 137cm is about 4.5 feet\\nvar maryHeight = 152; // 152cm is about 5 feet\\nvar nickHeight = 200; // 200cm is about 6 feet 6 inches\\n\\nvar rideHeight = 137; // 137cm is about 4.5 feet\\n\\nvar canSallyRide =\\n  var canTomRide =\\n    var isNickShorterThanMary =\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779ec"}, {"title": "Operations: Equality", "instructions": "# Exit Criteria:\n\n- Set the value of **looseComparison** to the loose equality comparison between **numberThree** and **stringThree**.\n- Set the value of **strictComparison** to the strict equality comparison between **numberThree** and **stringThree**.\n\n\u200b\n", "tests": "\"describe('your solution', function() {\\n  it('looseComparison_should_be_true', () => {\\n    expect(looseComparison).to.equal(true);\\n  });\\n  it('strictComparison_should_be_false', () => {\\n    expect(strictComparison).to.equal(false);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"var numberThree = 3;\\nvar stringThree = \\\"3\\\"; // note that this value is wrapped in quotation marks \\\"\\\"\\n\\n// Define your variables below\\nvar looseComparison =\\n  var strictComparison =\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779ed"}, {"title": "Operators: Logical", "instructions": "# Exit Criteria:\n\n- Set the **resultA** variable to the value of having either **x** _or_ **y**\n- Set the **resultB** variable to the value of having both **x** _and_ **y**\n\n\u200b\n", "tests": "\"describe('your solution', function() {\\n  it('resultA_should_be_true', () => {\\n    expect(resultA).to.equal(true);\\n  });\\n  it('resultB_should_be_false', () => {\\n    expect(resultB).to.equal(false);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"var x = true;\\nvar y = false;\\n\\n// Define the variables below\\nvar resultA =\\nvar resultB =\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779ee"}, {"title": "Conditionals: if", "instructions": "In the editor to the right, complete the `isOldEnoughToDrive` function to meet the exit criteria.\n\n# Exit Criteria:\n\n- Update the `isOldEnoughToDrive` function to return `\"Yes\"` when the `currentAge` parameter is greater than 16, and `\"No\"` when it is not.", "tests": "\"describe('your solution', function() {\\n  var toLowerCase = function(s){ return s.toLowerCase(); };\\n  it('should_let_17_pass', function() {\\n    var ages = [17, 20, 100, 300, Infinity];\\n    var finalResult = ages.map(isOldEnoughToDrive)\\n      .every(function(result){ return result.toLowerCase() === 'yes' });\\n    expect(finalResult).to.equal(true);\\n  });\\n\\n  it('should_not_let_16_pass', function() {\\n    const ages = [16, 15, 13, 2, 0, -10];\\n    const finalResult = ages.map(isOldEnoughToDrive)\\n      .every(function(result) { return result.toLowerCase() === 'no' });\\n    expect(finalResult).to.equal(true);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function ourTrueOrFalse(isItTrue) {\\n  if (isItTrue) {\\n    return 'Yes';\\n  }\\n  return 'No';\\n}\\n\\nfunction isOldEnoughToDrive(currentAge) {\\n\\n  // Define your conditional below\\n\\n\\n\\n\\n  return 'No';\\n}\\n\\n\\nisOldEnoughToDrive(20); // should return 'Yes'\\n\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779ef"}, {"title": "Conditionals: else/if", "instructions": "# Else if\n\nWe often find ourselves in scenarios where we need to take one of multiple possible actions depending on a particular condition.\n\nFor example, depending on the weather - we might have the following options:\n\n - If the weather is sunny - go to the beach\n - If the weather is rainy - play video games\n - If the weather is snowy - go snowboarding\n\nThis can be expressed in JavaScript using **else if** statements. Try to figure out what the following code executes, then in the editor write code to satisfy the exit criteria.\n\n<samp><pre>\n    var weather = 'sunny';\n    if (weather === 'sunny') {\n       console.log('go to the beach');\n    } else if (weather === 'rainy') {\n       console.log('play video games');\n    } else if (weather === 'snowy') {\n       console.log('go snowboarding');\n    }</pre></samp>\n\n\n# Exit Criteria:\n\n- Update the code in the **testElse** function to use the `else if` syntax.\n- Add an `else` block to return 'maybe' if neither of the previous two conditions are true.\n", "tests": "\"describe('your solution', function() {\\n  it('should_return_yes_over_9', () => {\\n    const values = [10, 20, 100, Infinity];\\n    const finalResult = values\\n      .map(testElseIf)\\n      .every(result => result.toLowerCase() === 'yes');\\n\\n    expect(finalResult).to.equal(true);\\n  });\\n  it('should_return_no_under_6', () => {\\n    const values = [5, 3, 0, -10];\\n    const finalResult = values\\n      .map(testElseIf)\\n      .every(result => result.toLowerCase() === 'no');\\n\\n    expect(finalResult).to.equal(true);\\n  });\\n  it('should_return_maybe_in_between_5_and_10', () => {\\n    const values = [9, 8, 8.5, 7, 6];\\n    const finalResult = values\\n      .map(testElseIf)\\n      .every(result => result.toLowerCase() === 'maybe');\\n\\n    expect(finalResult).to.equal(true);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function testElseIf(val) {\\n\\n  // Update the code below\\n  if (val >= 10) {\\n    return 'yes';\\n\\n  }\\n\\n  if (val <= 5) {\\n    return 'no';\\n\\n  }\\n\\n}\\n\\ntestElseIf(7);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779f0"}, {"title": "Conditionals: Switch", "instructions": "# Exit Criteria:\n\n- Add a switch statement that takes the `str` as a value\n- Add a case statement for the value 'yes' that assigns 1 to **result**\n- Add a case statement for the value 'no' that assigns 2 to **result**\n- Add a case statement for the value 'maybe' that assigns 3 to **result**\n", "tests": "\"describe('your solution', function() {\\n  it('should_return_1_when_given_yes', () => {\\n    expect(switchFunction('yes')).to.equal(1);\\n  });\\n  it('should_return_2_when_given_no', () => {\\n    expect(switchFunction('no')).to.equal(2);\\n  });\\n  it('should_return_3_when_given_maybe', () => {\\n    expect(switchFunction('maybe')).to.equal(3);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function switchFunction(str) {\\n  var result;\\n  // Write a switch statement below\\n\\n\\n\\n  // Don't change the code below\\n  return result;\\n}\\n\\nswitchFunction('yes');\\nswitchFunction('no');\\nswitchFunction('maybe');\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779f1"}, {"title": "Functions: Defining", "instructions": "# Exit Criteria:\n\n- Define a function called `myName` that returns your name as a string.\n", "tests": "\"describe('your solution', function() {\\n  it('should contain a function', function() {\\n   expect(myName).to.exist;\\n   expect(myName).to.be.a('function'); \\n});\\n  it('should return a string', function() {\\n   expect(myName()).to.be.a.string;\\n   expect(myName().length).to.be.greaterThan(1);\\n});\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Define your function below\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779f2"}, {"title": "Functions: Invoking", "instructions": "## Exit Criteria:\n\n- Define a function named `myFullName` that uses the `myFirstName` function to return your full name.\n", "tests": "\"describe('your solution', function() {\\n  it('myFirstName_should_return_a_string', () => {\\n    expect(typeof myFirstName()).to.equal('string');\\n  });\\n  it('myFullName_should_return_a_string', () => {\\n    expect(typeof myFullName()).to.equal('string');\\n  });\\n  it('myFullName_result_should_contain_myFirstName_result', () => {\\n    const first = myFirstName();\\n    const full = myFullName();\\n    expect(full.indexOf(first) >= 0).to.equal(true)\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function myFirstName() {\\n  return '';\\n}\\n\\n// Create your new function below\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779f3"}, {"title": "Functions: Parameters", "instructions": "# Exit Criteria:\n\n- Define a function called `putTogether` that accepts two parameters - `a` and `b`.\n- Write code to return the value of concatenating `a`, the \"&\" character, and `b`.\n\nFor example, if the value of `a` is \"hello\"  and the value of `b` is \"world\", the return value would be \"hello&world\".", "tests": "\"describe('your solution', function() {\\n  it('putTogether exists', () => {\\n    expect(putTogether).to.be.a('function');\\n  });\\n  it('returns a concatenated string', () => {\\n    expect(typeof putTogether('first','second')).to.equal('string');\\n    expect(putTogether('first', 'second')).to.contain('first');\\n    expect(putTogether('first', 'second')).to.contain('&');\\n    expect(putTogether('first', 'second')).to.contain('second');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Define your function below\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779f4"}, {"title": "Scope:  Defining variables in functions", "instructions": "# Exit Criteria:\n\n- Update the **myCar** function to return **'Ford'** by inserting code only on line 5\n", "tests": "\"describe('your solution', function() {\\n  it('myCar should return ford', () => {\\n    expect(myCar()).to.equal('Ford');\\n  });\\n  it('global carName variable should not change', () => {\\n    expect(carName).to.equal('Fiat');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"var carName = 'Fiat';\\n\\nfunction myCar() {\\n  // Your code here\\n\\n  //\\n  console.log(carName);\\n  return carName;\\n}\\n\\nmyCar();\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779f5"}, {"title": "Types: Object I", "instructions": "# Exit Criteria:\n\n- Update the variable `x` assignment to include a **property** called `y` which is set to `10`\n- On a new line create another **property** of `x` called `test` and set it to `\"This is a test\"`\n\n\u200b\n", "tests": "\"describe('your solution', function() {\\n  it('should have a property called y', () => {\\n    expect(x.y).to.equal(10)\\n  });\\n  it('should have a property called test', () => {\\n    expect(x.test.toLowerCase()).to.equal('this is a test');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Update the object below\\nvar x = {};\\n\\n\\n// Don't change the code below\\nconsole.log(x.y);\\nconsole.log(x['test'])\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779f6"}, {"title": "Types: Object II", "instructions": "# Exit Criteria:\n\n- Define a variable called **productInfo**\n- Set **productInfo** value to an object with a property **name** and set it's value to **\"bananas\"**\n- On a separate line add a new property to the **productInfo** object called **id** and set it's value to **1001**\n", "tests": "\"describe('your solution', function() {\\n  it('should have a property called name', () => {\\n    expect(productInfo).to.exist;\\n  });\\n  it('should have correct values', () => {\\n    expect(productInfo.name).to.equal('bananas');\\n    expect(productInfo.id).to.equal(1001);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Define your variable below\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779f7"}, {"title": "Types: Object III", "instructions": "# Exit Criteria:\n\n- Update the dig variable to reach the number 2 using the path of **x** then **y** then **w**\n- Update the dug variable to reach the number 12\n", "tests": "\"describe('your solution', function() {\\n  it('dig should equal 2', () => {\\n    expect(dig).to.equal(x.y.w);\\n  });\\n  it('dug should equal 12', () => {\\n    expect(dug).to.equal(x.z.c);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"var x = {\\n  y: {\\n    q: 1,\\n    w: 2,\\n    e: 3\\n  },\\n  z: {\\n    a: 10,\\n    b: 11,\\n    c: 12\\n  }\\n};\\n\\n// Define your variables below\\n\\nvar dig = x;\\nvar dug = x;\\n\\n// Don't change the code below\\nconsole.log(dig);\\nconsole.log(dug);\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779f8"}, {"title": "Loops: while", "instructions": "# Exit Criteria:\n\n- Inside the function named `looping` create a while loop that prints out the numbers 0 through 9\n", "tests": "\"describe('your solution', function() {\\nit('console.log should have been called 9 times', function() {\\n  let spy = sinon.spy(console, 'log');\\n  looping();\\n  expect(spy).to.have.callCount(9);\\n  console.log.restore();\\n});\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function looping() {\\n    var x = 0;\\n    // Define a while loop below\\n    // Use console.log() to print out to the console\\n\\n\\n}\\n\\nlooping();\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779f9"}, {"title": "Loops: for", "instructions": "# Exit Criteria:\n\n- Create a **for** loop that prints out all even numbers starting 0 and ending in 100 in ascending order.\n", "tests": "\"describe('your solution', function() {\\nit('should return all even numbers to 100', function() {\\n  let spy = sinon.spy(console, 'log');\\n  looping();\\n  expect(spy).to.have.callCount(51);\\n  console.log.restore();\\n});\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function looping() {\\n    var x = 0;\\n    // Define your for loop below\\n    // Use console.log() to print out to the console\\n\\n\\n}\\n\\nlooping();\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779fa"}, {"title": "HTML: Elements", "instructions": "- Navigate to the index.html tab in the code editor\n- Hit the Start button below\n\n# Exit Criteria:\n\n- Create a **paragraph** `<p></p>` element inside of the `<body></body>` element\n- Place the text **Hello World** inside of the `<p></p>` tags\n- Hit the Test button in the top right corner, then scroll down to see your results\n", "tests": "\"describe('your solution', function() {\\n  it('<body> element should contain a <p> element', () => {\\n    expect($('body p').length).to.equal(1);\\n  });\\n  it('<p> element should  \\\"Hello World\\\"', () => {\\n    expect($('body p').text().trim()).to.equal('Hello World');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    <!--Write your code below-->\\n\\n    <!--Write your code above-->\\n  </body>\\n</html>\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779fb"}, {"title": "HTML: Content Tags", "instructions": "- Navigate to the index.html tab in the code editor\n- Hit the Start button below\n\n# Exit Criteria:\n\n- Within the `<body></body>` element add some content elements:\n     1. Two **heading** elements:  an `<h1></h1>` and an `<h3></h3>`\n     2. One **paragraph** `<p></p>` element\n", "tests": "\"describe('your solution', function() {\\n  it('<body> should contain a <h1>', () => {\\n    expect($('body h1').length).to.equal(2);\\n  });\\n  it('<body> should contain a <h3>', () => {\\n    expect($('body h3').length).to.equal(1);\\n  });\\n  it('<body> should contain a <p>', () => {\\n    expect($('body p').length).to.equal(1);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    <!--Write your code below-->\\n    \\n    \\n    \\n    <!--Write your code above-->\\n  </body>\\n</html>\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779fc"}, {"title": "HTML: Nested Elements", "instructions": "- Navigate to the index.html tab in the code editor\n- Hit the Start button below\n\nExit Criteria:\n\n- Within the `<body></body>` element add a `<div></div>` container element\n- Within that `<div></div>` container element add _another_ `<div></div>` element\n- Within _that_ `<div></div>` element add a **paragraph** `<p></p>` element \n- Within the `<p></p>` tags add the text \"nested paragraph\"\n", "tests": "\"describe('your solution', function() {\\n  it('<body> element should have a <div>', () => {\\n    expect($('body > div:not(#mocha)').length).to.equal(1);\\n  });\\n  it('Previous <div> element should contain another <div> inside', () => {\\n    expect($('body > div:not(#mocha) > div').length).to.equal(1);\\n  });\\n  it('Previous inside <div> element should contain a <p> inside', () => {\\n    expect($('body > div:not(#mocha) > div > p').length).to.equal(1);\\n  });\\n  it('Nested <p> element should contain the string \\\"nested paragraph\\\"', () => {\\n    expect($('body > div:not(#mocha) > div > p').text()).to.equal('nested paragraph');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n  \\n  </body>\\n</html>\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779fd"}, {"title": "HTML: Semantic Markup", "instructions": "- Navigate to the index.html tab in the code editor\n- Hit the Start button below\n\n# Exit Criteria:\n\n- Update the `span` to be a `h1` header element\n- Update the `div` to be an `em` emphasis element\n- Update the `h2` to be a `p` paragraph element", "tests": "\"describe('your solution', function() {\\n  it('<span> element should be changed to <h1>', () => {\\n    expect($('body > h1').length).to.equal(1);\\n    expect($('body > h1').text()).to.equal('Look at this sweet Header');\\n  });\\n  it('<div> element should be changed to <em>', () => {\\n    expect($('body > h1 > em').length).to.equal(1);\\n    expect($('body > h1 > em').text()).to.equal('sweet');\\n  });\\n  it('<h2> element should be changed to <p>', () => {\\n    expect($('body > p').length).to.equal(1);\\n    expect($('body > p').contents().length).to.equal(1);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    <!--Write your code below-->\\n    \\n    <span>Look at this <div>sweet</div> Header</span>\\n    \\n    <h2>\\n      Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\nconsequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\\ncillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\nproident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n    </h2>\\n    \\n    <!--Write your code above-->\\n  </body>\\n</html>\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779fe"}, {"title": "HTML: More Content Tags", "instructions": "- Navigate to the index.html tab in the code editor\n- Hit the Start button below\n\n# Exit Criteria:\n\n- Put your name within the <**h1>** element\n- Under the first <**h4>** create an **ordered list**\n- Within the **ordered list**, add 3 **list items** with your favorite ice cream flavors in order\n- Under the second <**h4>** create an **unordered list**\n- Within the **unordered list**, add 3 **list items** with your favorite colors in any order\n", "tests": "\"describe('your solution', function() {\\n  it('<h1> element should contain your name', () => {\\n    expect($('body > h1').text().length).to.not.equal(0);\\n  });\\n  it('Ordered list should be under the <h4> element', () => {\\n    expect($('body > h4 + ol').length).to.equal(1);\\n  });\\n  it('Ordered list should have three list items', () => {\\n    expect($('body > h4 + ol li').length).to.equal(3);\\n  });\\n  it('Unordered list should be under the second <h4> element', () => {\\n    expect($('body > h4 ~ h4 + ul').length).to.equal(1);\\n  });\\n  it('Unordered list should have three list items', () => {\\n    expect($('body > h4 ~ h4 + ul li').length).to.equal(3);\\n  });\\n  it('All list items should have text', () => {\\n    expect($('body > h4 ~ h4 + ul li').length).to.not.equal(0);\\n    $('body > h4 + ul li').each(function(index){\\n\\texpect(!!($(this).text())).to.equal(true);\\n    })\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    <!--Write your code below-->\\n    \\n    <h1></h1>\\n    \\n    <h4>My Top 3 Favorite Ice Cream Flavors</h4>\\n    \\n    <h4>My Favorite Colors</h4>\\n    \\n    <!--Write your code above-->\\n  </body>\\n</html>\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae8849779ff"}, {"title": "HTML: Void Tags", "instructions": "# Void Tags:\n`<img src=\"...\" />`\n# Exit Criteria:\n\n- Add an `<input />` to the `<body>` element\n- Add an `<img />` to the `<body>` element\n- Add the `src` attribute and set its value to **\"https://placebear.com/200/300\"**\n", "tests": "\"describe('your solution', function() {\\n  it('body should have an <input /> element', () => {\\n    expect($('body input').length).to.not.equal(0);\\n  });\\n  it('body should have an <img /> element', () => {\\n    expect($('body img').length).to.not.equal(0);\\n  });\\n  it('<img> element should have a src attribute', () => {\\n    expect($('body img').attr('src')).to.equal('https://placebear.com/200/300');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a00"}, {"title": "HTML: Grouping", "instructions": "# Exit Criteria:\n\n- Group each `<h1>` and `<p> ` element pair by wrapping them in a `<div>` element\n", "tests": "\"describe('your solution', function() {\\n  function groupChecker(div, groupTitle) {\\n    const [h1, p] = Array.prototype.slice.call(div.children);\\n    expect(h1.innerText).to.contain(groupTitle);\\n    expect(p.length).to.not.equal(0);\\n  }\\n\\n  it('car group should be wrapped in a <div> element', () => {\\n    const [carGroup, houseGroup] = document.querySelectorAll('body > div');\\n    groupChecker(carGroup, 'Car');\\n  });\\n  it('house group should be wrapped in a <div> element', () => {\\n    const [carGroup, houseGroup] = document.querySelectorAll('body > div');\\n    groupChecker(houseGroup, 'House');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n      <h1>Car</h1>\\n      <p>\\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n      </p>\\n      \\n        \\n        \\n      <h1>House</h1>\\n      <p>\\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\n      </p>\\n      \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a01"}, {"title": "HTML: Classes", "instructions": "# Exit Criteria:\n\n- Add the `class` attribute to both `<div>` elements \n- Set the **class** equal to **\"picture-group\"**\n", "tests": "\"describe('your solution', function() {\\n  it('both <div> elements should have the picture-group class', () => {\\n    const [div1, div2] = document.querySelectorAll('body div');\\n    expect(div1.className).to.equal('picture-group');\\n    expect(div2.className).to.equal('picture-group');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <div>\\n      <img src=\\\"http://placebear.com/200/200\\\" />\\n      <img src=\\\"http://placebear.com/200/200\\\" />\\n    </div>\\n    \\n    <div>\\n      <img src=\\\"http://placebear.com/250/250\\\" />\\n      <img src=\\\"http://placebear.com/250/250\\\" />\\n    </div>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a02"}, {"title": "HTML: IDs", "instructions": "# Exit Criteria:\n\n- Add an `id` attribute to the _first_ `<div>` element with the value **\"blog-post-1\"**\n- Add an `id` to the `<div>` with the _images_ inside with the value **\"bear-images\"**\n- Add an `id` to the _last_ `<div>` with the value **\"blog-post-last\"**\n", "tests": "\"describe('your solution', function() {\\n  it('first div should have the ID \\\"blog-post-1\\\"', () => {\\n    const firstDiv = document.querySelectorAll('body > div')[0];\\n    expect(firstDiv.id).to.equal('blog-post-1');\\n  });\\n  it('second div should have the ID \\\"bear-images\\\"', () => {\\n    const secondDiv = document.querySelectorAll('body > div')[1];\\n    expect(secondDiv.id).to.equal('bear-images');\\n  });\\n  it('last div should have the ID \\\"blog-post-last\\\"', () => {\\n    const thirdDiv = document.querySelectorAll('body > div')[2];\\n    expect(thirdDiv.id).to.equal('blog-post-last');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <div>\\n      <p> Some blog content </p>\\n    </div>\\n    \\n    <div>\\n      <img src=\\\"http://placebear.com/200/200\\\" />\\n      <img src=\\\"http://placebear.com/200/200\\\" />\\n    </div>\\n    \\n    <div>\\n      <p> Some blog content </p>\\n    </div>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a03"}, {"title": "HTML: Complete", "instructions": "# Exit Criteria:\n\n- Add the `class` attribute with the value **\"blog-post\"** to the appropriate `<article>` elements\n- Add the `class` attribute with the value **\"blog-post-title\"** to the appropriate  `h1` elements\n- Add the `class` attribute with the value **\"blog-post-content\"** to the appropriate `<div>` elements\n- Add the `class` attribute with the value **\"blog-post-p\"** to the appropriate `<p>` elements\n", "tests": "\"describe('your solution', function() {\\n  function forEachElement(elements) {\\n    return [].forEach.bind(elements);\\n  }\\n  it('all <article> elements should have the class \\\"blog-post\\\"', () => {\\n    const articles = document.querySelectorAll('article');\\n    const forEachArticle = forEachElement(articles);\\n    const expectClass = article => expect(article.className).to.equal('blog-post');\\n    forEachArticle(expectClass);\\n  });\\n  it('all heading elements should have the class \\\"blog-post-title\\\"', () => {\\n    const headings = document.querySelectorAll('article > h1');\\n    const forEachHeading = forEachElement(headings);\\n    const expectClass = heading => expect(heading.className).to.equal('blog-post-title');\\n    forEachHeading(expectClass);\\n  });\\n  it('all <div> elements should have the class \\\"blog-post-content\\\"', () => {\\n    const divs = document.querySelectorAll('article > div');\\n    const forEachDiv = forEachElement(divs);\\n    const expectClass = div => expect(div.className).to.equal('blog-post-content');\\n    forEachDiv(expectClass);\\n  });\\n  it('all <p> elements should have the class \\\"blog-post-p\\\"', () => {\\n    const ps = document.querySelectorAll('article p');\\n    const forEachP = forEachElement(ps);\\n    const expectClass = p => expect(p.className).to.equal('blog-post-p');\\n    forEachP(expectClass);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p>\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <article>\\n      <h1>Blog Post 2</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p>\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a04"}, {"title": "CSS: Rules", "instructions": "We'll now place our CSS in the `styles.css` tab above the editor.\n\n**Rule structure**\n\n`selector {\n    property: value;\n    other-property: value;\n}`\n\n# Exit Criteria:\n- Create a rule using the `body` selector that sets the **color** property to **blue**\n\n", "tests": "\"describe('your solution', function() {\\n  it('<body> should have the color blue', () => {\\n    expect($('body').css('color')).to.equal('rgb(0, 0, 255)');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"index.css\\\">\\n  </head>\\n  \\n  <body>\\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 1</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 2</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a05"}, {"title": "CSS: Specificity", "instructions": "# Exit Criteria:\n\n- Add a new rule that selects all `p` elements and sets their **color** property to **red**\n", "tests": "\"describe('your solution', function() {\\n  function forEachElement(elements) {\\n    return [].forEach.bind(elements);\\n  }\\n  it('all <p> elements should have the color red', () => {\\n    const ps = document.querySelectorAll('p');\\n    const forEachP = forEachElement(ps);\\n    const hasCss = p => expect(window.getComputedStyle(p, null).getPropertyValue('color')).to.equal('rgb(255, 0, 0)');\\n    forEachP(hasCss);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"body {\\n  color: blue;\\n}\\n\\n/* Write your code below */\\n\\n\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"index.css\\\">\\n  </head>\\n  \\n  <body>\\n    \\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 1</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 2</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a06"}, {"title": "CSS: Specificity II", "instructions": "# Exit Criteria:\n\n- Create a new rule that targets all `p` elements in the `body` and sets the color to green without removing the previous rules\n\n\u200b\n", "tests": "\"describe('your solution', function() {\\n  function forEachElement(elements) {\\n    return [].forEach.bind(elements);\\n  }\\n  it('all <p> elements should have the color green', () => {\\n    const ps = document.querySelectorAll('p');\\n    const forEachP = forEachElement(ps);\\n    const hasCss = p => expect(window.getComputedStyle(p, null).getPropertyValue('color')).to.equal('rgb(0, 128, 0)');\\n    forEachP(hasCss);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"body {\\n  color: blue;\\n}\\n\\np {\\n  color: red;\\n}\\n\\n/* Write your code below */\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"index.css\\\">\\n  </head>\\n  \\n  <body>\\n    \\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 1</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 2</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a07"}, {"title": "CSS: Id Selector", "instructions": "# Exit Criteria:\n\n- Create a new rule that uses the ID selector `#first-blog-post` and sets it's **background-color** to the value **#E7E9EB**\n", "tests": "\"describe('your solution', function() {\\n  it('first blog post should have a CSS background-color property', () => {\\n    const firstPost = document.querySelector('#first-blog-post')\\n    expect(window.getComputedStyle(firstPost, null).getPropertyValue('background-color')).to.equal('rgb(231, 233, 235)')\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\".blog-post {\\n  padding: 2em;\\n  color: #113654;\\n  font-family: \\\"Helvetica\\\";\\n}\\n\\n/* Write your code below */\\n\\n\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article id=\\\"first-blog-post\\\" class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 1</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 2</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a08"}, {"title": "CSS Property: color", "instructions": "# Exit Criteria:\n\n- Using the `article` rule, set the **color** property to **blue**\n", "tests": "\"describe('your solution', function() {\\n  it('article should have the color blue', () => {\\n    expect($('article').css('color')).to.equal('rgb(0, 0, 255)');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  /* Write your code below */\\n  \\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a09"}, {"title": "CSS Property: font-family", "instructions": "# Exit Criteria:\n\n- Set the property **font-family** of the article rule to **\"Helvetica\"**\n", "tests": "\"describe('your solution', function() {\\n  it('<article> elements should have the font family Helvetica', () => {\\n    expect($('article').css('font-family')).to.equal('Helvetica');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  /* Write your code below */\\n  \\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a0a"}, {"title": "CSS Property: font-style", "instructions": "# Exit Criteria:\n\n- Set the property **font-style** of the article rule to **italic**\n", "tests": "\"describe('your solution', function() {\\n  it('<article> elements should have the font style italic', () => {\\n     expect($('article').css('font-style')).to.equal('italic');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  /* Write your code below */\\n  \\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a0b"}, {"title": "CSS Property: text-align", "instructions": "**Exit Criteria:** \n\nSet the property **text-align** of the article rule to **right**", "tests": "\"describe('your solution', function() {\\n  it('<article> elements should have their text aligned to the right', () => {\\n    expect($('article').css('text-align')).to.equal('right');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  /* Write your code below */\\n  \\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a0c"}, {"title": "CSS Property: text-indent", "instructions": "# Exit Criteria:\n\n- Set the property **text-indent** of the article rule to **16px**\n", "tests": "\"describe('your solution', function() {\\n  it('<article> elements should have a text indent of 16px', () => {\\n    expect($('article').css('text-indent')).to.equal('16px');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  /* Write your code below */\\n  \\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a0d"}, {"title": "CSS Property: font-size", "instructions": "# Exit Criteria:\n\n- Set the property **font-size** of the article rule to **100px**\n", "tests": "\"describe('your solution', function() {\\n  it('<article> elements should have their font size at 100px', () => {\\n    expect($('article').css('font-size')).to.equal('100px');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  /* Write your code below */\\n  \\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a0e"}, {"title": "CSS: Measurements", "instructions": "# Exit Criteria:\n\n- Set the property **font-size** of the article rule to **16px** in em\n- Set the property **padding** of the article rule to **32px** in em\n", "tests": "\"describe('your solution', function() {\\n  it('<article> elements should have their font size set to 16px in em', () => {\\n    expect($('article').css('font-size')).to.equal('16px');\\n  });\\n  /*it('<article> elements should have their padding set to 32px in em', () => {\\n    expect($('article').css('padding')).to.equal('32px');\\n  });*/\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  /* Write your code below */\\n  \\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a0f"}, {"title": "CSS Box: border", "instructions": "# Exit Criteria:\n\n- Set the property **border-width** of the article rule to **5px**\n- Set the property **border-style** of the article rule to **solid**\n- Set the property **border-color** of the article rule to **black**\n", "tests": "\"describe('your solution', function() {\\n  it('<article> elements should have a border width of 5px', () => {\\n    expect($('article').css('border-width')).to.equal('5px');\\n  });\\n  it('<article> elements should have a solid border-style', () => {\\n    expect($('article').css('border-style')).to.equal('solid');\\n  });\\n  it('<article> elements should have a black border color', () => {\\n    expect($('article').css('border-color')).to.equal('rgb(0, 0, 0)');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  padding: 1em;\\n  /* Write your code below */\\n  \\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a10"}, {"title": "CSS Box: width & height", "instructions": "# Exit Criteria:\n\n- Set the property **width** of the article rule to **500px**\n- Set the property **height** of the article rule to **300px**\n", "tests": "\"describe('your solution', function() {\\n  it('<article> elements should have a width of 500px', () => {\\n    expect($('article').css('width')).to.equal('500px');\\n  });\\n  it('<article> elements should have a height of 300px', () => {\\n    expect($('article').css('height')).to.equal('300px');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  padding: 1em;\\n  border-width: 5px;\\n  border-style: solid;\\n  border-color: black;\\n  /* Write your code below */\\n  \\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a11"}, {"title": "CSS Box: background-color", "instructions": "# Exit Criteria:\n\n- Set the property **background-color** of the article rule to **tomato**\n\n\u200b\n", "tests": "\"describe('your solution', function() {\\n  it('<article> elements should have a tomato background color', () => {\\n    expect($('article').css('background-color')).to.equal('rgb(255, 99, 71)');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  padding: 1em;\\n  border-width: 5px;\\n  border-style: solid;\\n  border-color: black;\\n  width: 500px;\\n  /* Write your code below */\\n  \\n}\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    <article id=\\\"first-article\\\">\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a12"}, {"title": "CSS Box: content-box vs border-box", "instructions": "# Exit Criteria:\n\n- Set the property **box-sizing** of the `#first-article` rule to **border-box**\n\nYou can see how setting the element to use **border-box** enforces that _everything up to and including the border is restricted to 500px_. The default **content-box** sets the content width to 500px, but ignores the **padding** and the **border**.\n", "tests": "\"describe('your solution', function() {\\n  it('<article> elements should have a border-box box-sizing property', () => {\\n    expect($('article').css('box-sizing')).to.equal('border-box');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  padding: 1em;\\n  border-width: 5px;\\n  border-style: solid;\\n  border-color: black;\\n  width: 500px;\\n}\\n\\n#first-article {\\n  /* Write your code below */\\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article id=\\\"first-article\\\">\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n    <article>\\n      <h1>Blog Post 2</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a13"}, {"title": "CSS Position: absolute", "instructions": "# Exit Criteria:\n\n- Set the property **position** of the `#box` rule to **absolute**\n\n_Observe: Try scrolling to see where the elements moves relative to the document._\n\n\u200b\n", "tests": "\"describe('your solution', function() {\\n  it('#box should be absolute positioned', () => {\\n    expect($('#box').css('position')).to.equal('absolute');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  padding: 1em;\\n  border-width: 5px;\\n  border-style: solid;\\n  border-color: black;\\n  width: 500px;\\n  height: 1000px;\\n}\\n\\n#box {\\n  padding: 1em;\\n  border-width: 4px;\\n  border-style: solid;\\n  border-color: blue;\\n  background-color: #3D93F6;\\n  box-sizing: border-box;\\n  width: 100px;\\n  height: 100px;\\n  \\n  top: 20px;\\n  left: 20px;\\n  /* Write your code below */\\n  \\n}\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <div id=\\\"box\\\">\\n      Example Box\\n    </div>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a14"}, {"title": "CSS Position: fixed", "instructions": "# Exit Criteria:\n\n- Update the property **position** of the `#box` rule to **fixed**\n\n_Observe: Try scrolling to see where the elements move relative to the document._\n", "tests": "\"describe('your solution', function() {\\n  it('#box should be fixed positioned', () => {\\n    expect($('#box').css('position')).to.equal('fixed');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  padding: 1em;\\n  border-width: 5px;\\n  border-style: solid;\\n  border-color: black;\\n  width: 500px;\\n  height: 1000px;\\n}\\n\\n#box {\\n  padding: 1em;\\n  border-width: 4px;\\n  border-style: solid;\\n  border-color: blue;\\n  background-color: #3D93F6;\\n  box-sizing: border-box;\\n  width: 100px;\\n  height: 100px;\\n  \\n  top: 20px;\\n  left: 20px;\\n  position: absolute;\\n}\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <div id=\\\"box\\\">\\n      Example Box\\n    </div>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a15"}, {"title": "CSS Position: relative", "instructions": "# Exit Criteria:\n\n- Set the property **position** of the `#box` rule to **relative**\n\n_Observe: Try scrolling to see where the elements move relative to the document._\n\n", "tests": "\"describe('your solution', function() {\\n  it('#box should be relative positioned', () => {\\n    expect($('#box').css('position')).to.equal('relative');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  padding: 1em;\\n  border-width: 5px;\\n  border-style: solid;\\n  border-color: black;\\n  width: 500px;\\n  height: 1000px;\\n}\\n\\n#box {\\n  padding: 1em;\\n  border-width: 4px;\\n  border-style: solid;\\n  border-color: blue;\\n  background-color: #3D93F6;\\n  box-sizing: border-box;\\n  width: 100px;\\n  height: 100px;\\n  \\n  top: 20px;\\n  left: 20px;\\n  position: fixed;\\n}\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <div id=\\\"box\\\">\\n      Example Box\\n    </div>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a16"}, {"title": "CSS Shorthand: padding", "instructions": "# Exit Criteria:\n\n- Update the `article` rule by removing the individual **padding-** properties and replacing them with one **padding** shorthand rule\n\n\u200b\n", "tests": "\"describe('your solution', function() {\\n  it('CSS for articles should not have individual padding properties', () => {\\n    expect($('style')[0].innerText).to.not.contain('padding-');\\n  });\\n  it('<article> elements should have a shorthand padding property', () => {\\n    expect($('style')[0].innerText).to.contain('padding: 10px 20px 30px 40px');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  border-width: 5px;\\n  border-style: solid;\\n  border-color: black;\\n  width: 500px;\\n  /*  Update the code below */\\n  \\n  padding-top: 10px;\\n  padding-right: 20px;\\n  padding-bottom: 30px;\\n  padding-left: 40px;\\n}\\n\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a17"}, {"title": "CSS Shorthand: border", "instructions": "# Exit Criteria:\n\n- Set the property **border** of the `article` rule to be **5px solid** and **black** using one **border** shorthand rule\n", "tests": "\"describe('your solution', function() {\\n  it('CSS for articles should not have individual border properties', () => {\\n    expect($('style')[0].innerText).to.not.contain('border-');\\n  });\\n  it('<article> elements should have a shorthand border property', () => {\\n    expect($('style')[0].innerText).to.contain('border: 5px solid');\\n    expect($('article').css('border-color')).to.equal('rgb(0, 0, 0)');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  padding: 10px 20px 30px 40px;\\n  width: 500px;\\n  /*  Write your code below */\\n  \\n}\\n\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a18"}, {"title": "CSS Specificity III", "instructions": "# Exit Criteria:\n\n- Create a new rule that targets all elements with the `.blog-post-title` class in the `article` and sets the **color** to **black** without removing the previous rules\n", "tests": "\"describe('your solution', function() {\\n  function forEachElement(elements) {\\n    return [].forEach.bind(elements);\\n  }\\n  it('blog post titles should override the previous style', () => {\\n    const titles = document.querySelectorAll('article .blog-post-title')\\n    const forEachTitle = forEachElement(titles)\\n    const hasCss = title => expect($(title).css('color')).to.equal('rgb(0, 0, 0)');\\n    forEachTitle(hasCss);\\n  });\\n});\\n\\n\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\".blog-post {\\n  padding: 2em;\\n  color: #113654;\\n  font-family: \\\"Helvetica\\\";\\n}\\n\\n.blog-post-title {\\n  color: red;\\n}\\n\\n/* Write your code below */\\n\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article id=\\\"first-blog-post\\\" class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 1</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 2</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a19"}, {"title": "CSS Specificity IV", "instructions": "# Exit Criteria:\n\n- Add a new class to the first **h1** blog post title called `special-title`, there should only be one element with this special title.\n- Create a new rule that targets all elements that have both the **.blog-post-title** and **.special-title**  classes and set the **color** to **orange** without removing the previous rules\n", "tests": "\"describe('your solution', function() {\\n\\n  it('first <h1> element should have the special title class', () => {\\n    const firstH1 = document.querySelectorAll('h1')[0]\\n    expect(firstH1.classList.value).to.contain('blog-post-title special-title')\\n  });\\n\\n  it('special title and other blog post titles should be orange', () => {\\n    expect($('.blog-post-title').css('color')).to.equal('rgb(255, 165, 0)');\\n    expect($('.special-title').css('color')).to.equal('rgb(255, 165, 0)');\\n  });\\n\\n  it('there should only be one special title', () => {\\n    const elements = document.querySelectorAll('.special-title')\\n    expect(elements.length).to.equal(1)\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\".blog-post {\\n  padding: 2em;\\n  color: #113654;\\n  font-family: \\\"Helvetica\\\";\\n}\\n\\n.blog-post-title {\\n  color: red;\\n}\\n\\narticle .blog-post-title {\\n  color: black;\\n}\\n\\n/* Write your code below */\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"index.css\\\">\\n  </head>\\n  \\n  <body>\\n    \\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 1</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 2</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a1a"}, {"title": "CSS: Specificity V", "instructions": "# Exit Criteria:\n\n- Create a new rule that targets all `.blog-post-title` elements within the `#top-post` element and sets the **color** to **hotpink** without removing the previous rules\n", "tests": "\"describe('your solution', function() {\\n  it('top post title should be hotpink', () => {\\n    expect($('#top-post .blog-post-title').css('color')).to.equal('rgb(255, 105, 180)');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\".blog-post {\\n  padding: 2em;\\n  color: #113654; /* blue-ish gray */\\n  font-family: \\\"Helvetica\\\";\\n}\\n\\n#top-post {\\n  color: green;\\n}\\n\\n.blog-post-title {\\n  color: red;\\n}\\n\\narticle .blog-post-title {\\n  color: black;\\n}\\n\\n.blog-post-title.special-title {\\n  color: orange;\\n}\\n\\n\\n/* Write your code below */\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"index.css\\\">\\n  </head>\\n  \\n  <body>\\n    \\n    <article id=\\\"top-post\\\" class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title special-title\\\">Blog Post 1</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 2</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a1b"}, {"title": "CSS: Specificity VI", "instructions": "# Exit Criteria:\n\n- Add the **!important** flag to the `.blog-post` color property to override the `#top-post` color property\n", "tests": "\"describe('your solution', function() {\\n  it('top post title should have !important', () => {\\n    expect($('#top-post h1').css('color')).to.equal('rgb(17, 54, 84)');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\".blog-post {\\n  padding: 2em;\\n  color: #113654;\\n  font-family: \\\"Helvetica\\\";\\n}\\n\\n#top-post {\\n  color: green;\\n}\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"index.css\\\">\\n  </head>\\n  \\n  <body>\\n    \\n    <article id=\\\"top-post\\\" class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title special-title\\\">Blog Post 1</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 2</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a1c"}, {"title": "CSS: Inline Styles", "instructions": "# Exit Criteria:\n\n- Add an inline style attribute to the `#top-post` element that sets the element's **color** to **black**\n", "tests": "\"describe('your solution', function() {\\n  it('top post element should have an inline style', () => {\\n    expect($('#top-post').attr('style')).to.contain('color');\\n  });\\n  it('top post element text should be the color black', () => {\\n    expect($('#top-post').css('color')).to.equal('rgb(0, 0, 0)');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\".blog-post {\\n  padding: 2em;\\n  color: #113654;\\n  font-family: \\\"Helvetica\\\";\\n}\\n\\n#top-post {\\n  color: green;\\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"index.css\\\">\\n  </head>\\n  \\n  <body>\\n    \\n    <article id=\\\"top-post\\\" class=\\\"blog-post\\\">\\n      \\n      <h1 class=\\\"blog-post-title special-title\\\">Blog Post 1</h1>\\n      \\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n        \\n      </div>\\n      \\n    </article>\\n    \\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 2</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a1d"}, {"title": "CSS: Centering", "instructions": "# Exit Criteria:\n\n- Update the `article` rule **margin** property to horizontally center the article on the page, leaving the top and bottom margin at **10px**;\n", "tests": "\"describe('your solution', function() {\\n  it('<article> element should be horizontally centered', () => {\\n    expect($('style')[0].innerText).to.contain('margin: 10px auto');\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"article {\\n  border-width: 5px;\\n  border-style: solid;\\n  border-color: black;\\n  width: 500px;\\n  padding: 1em;\\n  margin: 10px 40px 10px 40px;\\n}\\n\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n  </head>\\n  \\n  <body>\\n    \\n    <article>\\n      <h1>Blog Post 1</h1>\\n      <div>\\n        <p>\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a1e"}, {"title": "CSS: float", "instructions": "# Exit Criteria:\n\n- Update the `.blog-post` rule to place the two blog posts next to each other by setting the **width** property to **45 percent** and the **float** property to **left**\n", "tests": "\"describe('your solution', function() {\\n  function forEachElement(elements) {\\n    return [].forEach.bind(elements);\\n  }\\n  it('blog posts should be next to each other', () => {\\n    expect($('style')[0].innerText).to.contain('width: 45%');\\n    const posts = document.querySelectorAll('.blog-post')\\n    const forEachPost = forEachElement(posts)\\n    const hasFloat = (post) => expect($(post).css('float')).to.equal('left');\\n    forEachPost(hasFloat);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"body {\\n  font-family: Helvetica;\\n  background: #FCFCFC;\\n  color: #113654;\\n  padding: 2em;\\n}\\n\\n.blog-post-p {\\n  line-height: 1.6;\\n  text-indent: 1.4em;\\n}\\n\\n.blog-post-title {\\n  font-size: 24px;\\n  font-weight: normal;\\n  text-align: center;\\n  margin-bottom: 10px;\\n}\\n\\n.blog-post {\\n  border: 1px solid black;\\n  margin-bottom: 5px;\\n  padding: 10px;\\n  background-color: white;\\n\\t\\n  margin-right: 2%;\\n  /* Write your code below */\\n  \\n  \\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"index.css\\\">\\n  </head>\\n  \\n  <body>\\n    \\n    <article id=\\\"top-post\\\" class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title special-title\\\">Blog Post 1</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 2</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        <p class=\\\"blog-post-p\\\">\\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n          quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n          consequat. \\n        </p>\\n            \\n        <p class=\\\"blog-post-p\\\">\\n          Duis aute irure dolor in reprehenderit in voluptate velit esse\\n          cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n          proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n        </p>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a1f"}, {"title": "CSS: .clearfix", "instructions": "# Exit Criteria:\n\n- Find and add a `.clearfix` class to your css.\n- Apply the class to the `section` elements\n\nMake sure to re-name the class `clearfix` even if you find it online by another name like **cf**", "tests": "\"describe('your solution', function() {\\n  function forEachElement(elements) {\\n    return [].forEach.bind(elements);\\n  }\\n  it('sections should have clearfix class', () => {\\n    const forEachSection = forEachElement(document.querySelectorAll('section'))\\n    console.log(\\\"All of the grabbed sections: \\\" , document.querySelectorAll('section'))\\n    const hasClass = section => expect(section.classList.value).to.contain('clearfix')\\n    forEachSection(hasClass);\\n  });\\n\\n  it('clearfix:after should have content property', () => {\\n    expect($('style')[0].innerText).to.contain('.clearfix:');\\n    expect($('style')[0].innerText).to.contain(':after');\\n    const forEachClearfix = forEachElement(document.querySelectorAll('.clearfix'))\\n    const hasAfterContent = (section) => {\\n      const afterStyle = window.getComputedStyle(section, ':after')\\n      const value = afterStyle.getPropertyValue('content')\\n      expect(['\\\"\\\"', '\\\" \\\"']).to.contain(value);\\n    }\\n    forEachClearfix(hasAfterContent);\\n  });\\n\\n  it('clearfix:after should have display: table', () => {\\n    expect($('style')[0].innerText).to.contain('.clearfix:');\\n    expect($('style')[0].innerText).to.contain(':after');\\n    const forEachClearfix = forEachElement(document.querySelectorAll('.clearfix'))\\n    const hasAfterDisplay = (section) => {\\n      const afterStyle = window.getComputedStyle(section, ':after')\\n      const value = afterStyle.getPropertyValue('display')\\n      expect(value).to.equal('table');\\n    }\\n    forEachClearfix(hasAfterDisplay);\\n  });\\n\\n  it('clearfix:after should have clear:both', () => {\\n    expect($('style')[0].innerText).to.contain('.clearfix:');\\n    expect($('style')[0].innerText).to.contain(':after');\\n    const forEachClearfix = forEachElement(document.querySelectorAll('.clearfix'))\\n    const hasAfterClear = (section) => {\\n      const afterStyle = window.getComputedStyle(section, ':after')\\n      const value = afterStyle.getPropertyValue('clear')\\n      expect(value).to.equal('both');\\n    }\\n    forEachClearfix(hasAfterClear);\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>Origin Code Academy</title>\\n    <link rel=\\\"stylesheet\\\" href=\\\"index.css\\\">\\n  </head>\\n  \\n  <body>\\n    \\n    <article class=\\\"blog-post\\\">\\n      <h1 class=\\\"blog-post-title\\\">Blog Post 1</h1>\\n      <div class=\\\"blog-post-content\\\">\\n        \\n        <section id=\\\"top-section\\\">\\n          <p class=\\\"blog-post-p\\\">\\n            Block 1 <br/>\\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n            tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n            quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n            consequat. \\n          </p>\\n              \\n          <p class=\\\"blog-post-p\\\">\\n            Block 2 <br/>\\n            Duis aute irure dolor in reprehenderit in voluptate velit esse\\n            cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n            proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n          </p>\\n        </section>\\n        \\n        <section id=\\\"bottom-section\\\">\\n          <p class=\\\"blog-post-p\\\">\\n            Block 3 <br/>\\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\\n            tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\\n            quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\\n            consequat. \\n          </p>\\n              \\n          <p class=\\\"blog-post-p\\\">\\n            Block 4 <br/>\\n            Duis aute irure dolor in reprehenderit in voluptate velit esse\\n            cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\\n            proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n          </p>\\n        </section>\\n      </div>\\n    </article>\\n    \\n  </body>\\n</html>\"", "type": "html"}, {"content": "\"\\n\\n\\n\\n\\n/* Create your code above */\\n\\nsection {\\n  background: #485d6f;\\n  border: 1px solid black;\\n  padding: 1em;\\n  margin-bottom: 2em;\\n}\\n\\nbody {\\n  font-family: Helvetica;\\n  background: #FCFCFC;\\n  color: #113654;\\n  padding: 2em;\\n}\\n\\n.blog-post-p {\\n  box-sizing: border-box;\\n  line-height: 1.6;\\n  text-indent: 1.4em;\\n  border: 1px solid black;\\n  margin-bottom: 5px;\\n  padding: 10px;\\n  background-color: #E7E9EB;\\n  margin-right: 2%;\\n  width: 45%;\\n  float: left;\\n}\\n\\n.blog-post-title {\\n  font-size: 24px;\\n  font-weight: normal;\\n  text-align: center;\\n  margin-bottom: 10px;\\n}\\n\"", "type": "css"}, {"content": "\"\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a20"}, {"title": "Selecting Elements: Basic selectors", "instructions": "**Exit Criteria:**\n\n- All jQuery must be written in `main.js`\n- Write jQuery to select all elements.\n- Write jQuery to select all **div** elements.\n- Write jQuery to select all elements with the `block-hover` class applied.\n- Write jQuery to select the `block-one` element.\n- Write jQuery to select the `block-one` and `block-two` elements.\n\n**Hint:**\n\nWrite all your code inside of the `basicSelectors` function. All you need to do is to write the selection code.", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spyjQuery = sinon.spy(window, '$');\\n        basicSelectors();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n    });\\n\\n    it('should have jQuery select all elements', () => {\\n        expect(this.spyjQuery.calledWith('*')).to.equal(true);\\n    });\\n\\n    it('should have jQuery select all <div> elements', () => {\\n        expect(this.spyjQuery.calledWith('div')).to.equal(true);\\n    });\\n\\n    it('should have jQuery select all elements with the block-hover class', () => {\\n        expect(this.spyjQuery.calledWith('.block-hover')).to.equal(true);\\n    });\\n\\n    it('should have jQuery select the block-one element', () => {\\n        expect(this.spyjQuery.calledWith('#block-one')).to.equal(true);\\n    });\\n\\n    it('should have jQuery select the block-one and block-two element', () => {\\n        expect(this.spyjQuery.calledWith('#block-one, #block-two')).to.equal(true);\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function basicSelectors() {\\n    // Write your code inside this function\\n\\n\\n}\""}, {"type": "css", "content": "\"#block-one {\\n  width: 100px;\\n  height: 100px;\\n  background-color: red;\\n  display: inline-block;\\n}\\n\\n#block-two {\\n  width: 100px;\\n  height: 100px;\\n  background-color: green;\\n  display: inline-block;\\n}\\n\\n#block-three {\\n  width: 100px;\\n  height: 100px;\\n  background-color: blue;\\n  display: inline-block;\\n}\\n\\n#block-four {\\n  width: 100px;\\n  height: 100px;\\n  background-color: gray;\\n  display: inline-block;\\n}\\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <title>repl.it</title>\\n</head>\\n\\n<body>\\n  \\n  <div id=\\\"block-one\\\"></div>\\n  <div id=\\\"block-two\\\" class=\\\"block-hover\\\"></div>\\n  <div id=\\\"block-three\\\" class=\\\"block-hover\\\"></div>\\n  <div id=\\\"block-four\\\"></div>\\n  \\n  <script src=\\\"https://code.jquery.com/jquery-3.2.1.min.js\\\"></script>\\n  \\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a21"}, {"title": "Selecting Elements: Hierarchy Selection", "instructions": "**Exit Criteria:**\n\n\n- All jQuery must be written in `main.js`\n- Using the descendant selector, write jQuery to select all `<p>` elements that are descendants of the `section#ancestor` element.\n- Using the child selector, write jQuery to select all `<li>` elements that are children of the `ul#parent` element.\n- Using the sibling selector, write jQuery to select the `li#fourth` element as a sibling of the `li#third `element.\n\n**Hint:**\n\nWrite all your code inside of the `hierarchySelection` function. All you need to do is to write the selection code. \n", "tests": "\"describe('your solution', function() {\\n  it('should_select_descendants_of_ancestor', () => {\\n      let spy = sinon.spy(window, \\\"$\\\");\\n      hierarchySelection();\\n      expect(spy.getCall(0).returnValue.selector).to.equal('section#ancestor p');\\n     window.$.restore();\\n  });\\n  it('should_select_children_of_parent', () => {\\n      let spy = sinon.spy(window, \\\"$\\\");\\n      hierarchySelection();\\n      expect(spy.getCall(1).returnValue.selector).to.equal('ul#parent > li');\\n     window.$.restore();\\n  });\\n  it('should_select_sibling_of_third', () => {\\n      let spy = sinon.spy(window, \\\"$\\\");\\n      hierarchySelection();\\n      expect(spy.getCall(2).returnValue.selector).to.equal('li#third ~ li#fourth');\\n     window.$.restore();\\n  });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function hierarchySelection() {\\n    // Write your code within this function\\n\\n\\n}\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n    <title>repl.it</title>\\n</head>\\n\\n<body>\\n  \\n  <!-- Descendant Selector Markup -->\\n  <section id=\\\"ancestor\\\">\\n    <div>\\n      <p>Should be included</p>\\n    </div>\\n    <div>\\n      <p>Should be included</p>\\n    </div>\\n  </section>\\n  \\n  <p>Should not be included</p>\\n  \\n  \\n  <!-- Child Selector Markup -->\\n  <ul id=\\\"parent\\\">\\n    <li>Spiderman</li>\\n    <li>Wolverine</li>\\n    <li>Dr Strange</li>\\n    <li>Iron Man</li>\\n    <li>Thor</li>\\n  </ul>\\n  \\n  \\n  <!-- Sibling Selector Markup -->\\n  <ul id=\\\"siblings\\\">\\n    <li id=\\\"first\\\"></li>\\n    <li id=\\\"second\\\"></li>\\n    <li id=\\\"third\\\"></li>\\n    <li id=\\\"fourth\\\"></li>\\n    <li id=\\\"fifth\\\"></li>\\n  </ul>\\n\\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a22"}, {"title": "Selecting Elements: Basic Filters", "instructions": "**Exit Criteria:** \n\n- All jQuery must be written in `main.js`\n- Define a function called `getMovie` where you'll put your code\n- Write jQuery to select the first movie in the unordered list\n- Write jQuery to select the last movie in the unordered list\n- Write jQuery to select all even indexed movies\n- Write jQuery to select all odd indexed movies\n- Write jQuery to select the 4th movie (The Dark Knight)\n- Write jQuery to select the top 5 movies (Shawshank to 12 Angry Men)\n- Write jQuery to select the bottom 5 movies (Schindler's List to Fight Club)\n", "tests": "\"describe('your solution', function() {\\n    it('should select the first movie in the unordered list', () => {\\n        var validSelectors = ['#top-ten-movies-on-imdb > li:first', 'ul > li:first'];\\n        let spy = sinon.spy(window, \\\"$\\\");\\n        getMovie();\\n        expect(spy.getCall(0).returnValue.selector).to.satisfy(function c(s) {\\n            for (let selector of validSelectors) if (s === selector) return true;\\n            return false;\\n        });\\n        window.$.restore();\\n    });\\n    it('should select the last movie in the unordered list', () => {\\n        var validSelectors = ['#top-ten-movies-on-imdb > li:last', 'ul > li:last'];\\n        let spy = sinon.spy(window, \\\"$\\\");\\n        getMovie();\\n        expect(spy.getCall(1).returnValue.selector).to.satisfy(function c(s) {\\n            for (let selector of validSelectors) if (s === selector) return true;\\n            return false;\\n        });\\n        window.$.restore();\\n    });\\n    it('should select all even indexed movies', () => {\\n        var validSelectors = ['#top-ten-movies-on-imdb > li:even', 'ul > li:even'];\\n        let spy = sinon.spy(window, \\\"$\\\");\\n        getMovie();\\n        expect(spy.getCall(2).returnValue.selector).to.satisfy(function c(s) {\\n            for (let selector of validSelectors) if (s === selector) return true;\\n            return false;\\n        });\\n        window.$.restore();\\n    });\\n    it('should select all odd indexed movies', () => {\\n        var validSelectors = ['#top-ten-movies-on-imdb > li:odd', 'ul > li:odd'];\\n        let spy = sinon.spy(window, \\\"$\\\");\\n        getMovie();\\n        expect(spy.getCall(3).returnValue.selector).to.satisfy(function c(s) {\\n            for (let selector of validSelectors) if (s === selector) return true;\\n            return false;\\n        });\\n        window.$.restore();\\n    });\\n    it('should select the dark knight', () => {\\n        var validSelectors = ['#top-ten-movies-on-imdb > li:eq(3)', 'ul > li:eq(3)', '#top-ten-movies-on-imdb > li:nth-of-type(3)', 'ul > li:nth-of-type(3)'];\\n        let spy = sinon.spy(window, \\\"$\\\");\\n        getMovie();\\n        expect(spy.getCall(4).returnValue.selector).to.satisfy(function c(s) {\\n            for (let selector of validSelectors) if (s === selector) return true;\\n            return false;\\n        });\\n        window.$.restore();\\n    });\\n    it('should select the top 5 movies', () => {\\n        var validSelectors = ['#top-ten-movies-on-imdb > li:lt(5)', 'ul > li:lt(5)'];\\n        let spy = sinon.spy(window, \\\"$\\\");\\n        getMovie();\\n        expect(spy.getCall(5).returnValue.selector).to.satisfy(function c(s) {\\n            for (let selector of validSelectors) if (s === selector) return true;\\n            return false;\\n        });\\n        window.$.restore();\\n    });\\n    it('should select the bottom 5 movies', () => {\\n        var validSelectors = ['#top-ten-movies-on-imdb > li:gt(4)', 'ul > li:gt(4)'];\\n        let spy = sinon.spy(window, \\\"$\\\");\\n        getMovie();\\n        expect(spy.getCall(6).returnValue.selector).to.satisfy(function c(s) {\\n            for (let selector of validSelectors) if (s === selector) return true;\\n            return false;\\n        });\\n        window.$.restore();\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n    <title>repl.it</title>\\n</head>\\n\\n<body>\\n  \\n  <ul id=\\\"top-ten-movies-on-imdb\\\">\\n    <li>The Shawshank Redemption</li>\\n    <li>The Godfather</li>\\n    <li>The Godfather: Part II</li>\\n    <li>The Dark Knight</li>\\n    <li>12 Angry Men</li>\\n    <li>Schindler's List</li>\\n    <li>Pulp Fiction</li>\\n    <li>The Lord of the Rings: The Return of the King</li>\\n    <li>The Good, the Bad and the Ugly</li>\\n    <li>Fight Club</li>\\n  </ul>\\n  \\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a23"}, {"title": "Selecting Elements: Child Filters", "instructions": "**Exit Criteria:**\n\n- Define a function called `getMovie` where you'll put your code\n- Write jQuery to select the name of all movies using the `:first-child` filter\n- Write jQuery to select the year of all movies using the `:last-child` filter\n- Write jQuery to select the name of the 4th movie (The Dark Knight) using the `:nth-child `filter\n", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spy = sinon.spy(window, \\\"$\\\");\\n        getMovie();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n    });\\n\\n    it('should select the name of all movies', () => {\\n        expect(this.spy.getCall(0).returnValue.selector).to.equal('table > tbody > tr > td:first-child');\\n    });\\n    it('should select the year of all movies', () => {\\n        expect(this.spy.getCall(1).returnValue.selector).to.equal('table > tbody > tr > td:last-child');\\n    });\\n    it('should select the 4th movie', () => {\\n        expect(this.spy.getCall(2).returnValue.selector).to.equal('table > tbody > tr:nth-child(4) > td:first-child');\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n    <title>repl.it</title>\\n    <link href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\\\" rel=\\\"stylesheet\\\" />\\n</head>\\n\\n<body>\\n  \\n  <h1>Top Ten Movies on IMDB</h1>\\n  \\n  <table class=\\\"table\\\">\\n    <thead>\\n      <tr>\\n        <th>Name</th>\\n        <th>Released</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr>\\n        <td>The Shawshank Redemption</td>\\n        <td>1994</td>\\n      </tr>\\n      <tr>\\n        <td>The Godfather</td>\\n        <td>1972</td>\\n      </tr>\\n      <tr>\\n        <td>The Godfather: Part II</td>\\n        <td>1974</td>\\n      </tr>\\n      <tr>\\n        <td>The Dark Knight</td>\\n        <td>2008</td>\\n      </tr>\\n      <tr>\\n        <td>12 Angry Men</td>\\n        <td>1957</td>\\n      </tr>\\n      <tr>\\n        <td>Schindler's List</td>\\n        <td>1993</td>\\n      </tr>\\n      <tr>\\n        <td>Pulp Fiction</td>\\n        <td>1994</td>\\n      </tr>\\n      <tr>\\n        <td>The Lord of the Rings: The Return of the King</td>\\n        <td>2003</td>\\n      </tr>\\n      <tr>\\n        <td>The Good, the Bad and the Ugly</td>\\n        <td>1966</td>\\n      </tr>\\n      <tr>\\n        <td>Fight Club</td>\\n        <td>1999</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n    \\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a24"}, {"title": "Selecting Elements: Attribute Filters", "instructions": "**Exit Criteria**\n\n- Define a function called `getInput` where you'll put your code\n- Write jQuery to select all inputs where the **name** attribute equals **firstName**\n- Write jQuery to select all inputs where the **name** attribute does not equal **firstName**\n- Write jQuery to select all inputs where the **name** attribute begins with the letter **f**.\n- Write jQuery to select all inputs where the **name** attribute ends with the letter **t**.\n- Write jQuery to select all inputs where the **name** attribute contains the letter **v**.", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spy = sinon.spy(window, \\\"$\\\");\\n        getInput();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n    });\\n\\n    it('should select the elements where the name attribute equals firstName', () => {\\n        expect(this.spy.getCall(0).returnValue.selector).to.equal('input[name=firstName]');\\n    });\\n\\n    it('should select the elements where the name attribute does not equal firstName', () => {\\n        expect(this.spy.getCall(1).returnValue.selector).to.equal('input[name!=firstName]');\\n    });\\n    it('should select the elements where the name begins with the letter f', () => {\\n        expect(this.spy.getCall(2).returnValue.selector).to.equal('input[name^=f]');\\n    });\\n    it('should select the elements where the name ends with the letter t', () => {\\n        expect(this.spy.getCall(3).returnValue.selector).to.equal('input[name$=t]');\\n    });\\n    it('should select the elements where the name contains the letter v', () => {\\n        expect(this.spy.getCall(4).returnValue.selector).to.equal('input[name*=v]');\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n    <title>repl.it</title>\\n</head>\\n\\n<body>\\n  \\n  <form>\\n    <div>\\n      <input type=\\\"text\\\" name=\\\"firstName\\\" placeholder=\\\"First Name\\\" />\\n      <input type=\\\"text\\\" name=\\\"lastName\\\" placeholder=\\\"Last Name\\\" />\\n    </div>\\n    <div>\\n      <input type=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"Password\\\" />\\n    </div>\\n    <div>\\n      <input type=\\\"radio\\\" name=\\\"favoriteFruit\\\" value=\\\"apple\\\" /> Apple\\n      <input type=\\\"radio\\\" name=\\\"favoriteFruit\\\" value=\\\"orange\\\" /> Orange\\n      <input type=\\\"radio\\\" name=\\\"favoriteFruit\\\" value=\\\"banana\\\" /> Banana\\n    </div>\\n    <div>\\n      <input type=\\\"checkbox\\\" name=\\\"receiveEmails\\\" /> Receive emails?\\n    </div>\\n  </form>\\n  \\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a25"}, {"title": "Selecting Elements: Form Filters", "instructions": "**Exit Criteria**\n\n- Create an input element of each type specified in the list below.\n- Create a selector for each element in the `formFilter` function in `main.js`.\u200b\n\n**Input Types**\n1. text\n2. password\n3. radio\n4. checkbox\n5. submit\n6. reset\n7. button\n8. file\n", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spy = sinon.spy(window, \\\"$\\\");\\n        formFilter();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n    });\\n\\n    it('should select input text element', () => {\\n        expect(this.spy.getCall(0).returnValue.selector).to.equal('input:text');\\n    });\\n    it('should select input password element', () => {\\n        expect(this.spy.getCall(1).returnValue.selector).to.equal('input:password');\\n    });\\n    it('should select input radio element', () => {\\n        expect(this.spy.getCall(2).returnValue.selector).to.equal('input:radio');\\n    });\\n    it('should select input checkbox element', () => {\\n        expect(this.spy.getCall(3).returnValue.selector).to.equal('input:checkbox');\\n    });\\n    it('should select input submit element', () => {\\n        expect(this.spy.getCall(4).returnValue.selector).to.equal('input:submit');\\n    });\\n    it('should select input reset element', () => {\\n        expect(this.spy.getCall(5).returnValue.selector).to.equal('input:reset');\\n    });\\n    it('should select input button element', () => {\\n        expect(this.spy.getCall(6).returnValue.selector).to.equal('input:button');\\n    });\\n    it('should select input file element', () => {\\n        expect(this.spy.getCall(7).returnValue.selector).to.equal('input:file');\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\\\"utf-8\\\">\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n<title>repl.it</title>\\n</head>\\n<body>\\n  \\n  \\n  <script src=\\\"https://code.jquery.com/jquery-3.2.1.min.js\\\"></script>\\n</body>\\n</html>\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"function formFilter() {\\n    // insert your code here\\n\\n}\\n\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a26"}, {"title": "Events: Click Event", "instructions": "**Exit Criteria**\n\n- Add a **button** element to `index.html` with an **id** of `say-hello`.\n- Create a **function** called `clickEventHandler` in `main.js`\n- Create another **function** called `clickEventExample`\n- Within the `clickEventExample` **function** attach the `clickEventHandler` **function** to the `.click()` event of your new **button** using jQuery\n", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spyjQuery = sinon.spy(window, \\\"$\\\");\\n        this.spyClick = sinon.spy(window, \\\"clickEventHandler\\\");\\n        clickEventExample();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n        window.clickEventHandler.restore();\\n    });\\n\\n    it('should bind click event handler', () => {\\n        $('button#say-hello').click();\\n        expect(this.spyClick.called).to.equal(true);\\n    });\\n\\n    it('should select button', () => {\\n        expect(this.spyjQuery.getCall(0).returnValue.selector).to.equal('#say-hello');\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n  <title>repl.it</title>\\n</head>\\n\\n<body>\\n  \\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.js'></script>\\n  \\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a27"}, {"title": "Events: Mouseover Event", "instructions": "**Exit Criteria**\n\n- Add an image of a cat to `index.html` with the **id** `cat`\n- Create a **function** called `mouseoverEventHandler` in `main.js` - this **function** should **console.log** the message \"This is a cat\".\n- Create a **function** called `mouseoverEventExample`.\n- Inside the `mouseoverEventExample` **function** attach the `mouseover` event of your new image using jQuery\n", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spyjQuery = sinon.spy(window, \\\"$\\\");\\n        this.spyMouseOver = sinon.spy(window, \\\"mouseoverEventHandler\\\");\\n        this.spyConsole = sinon.spy(console, \\\"log\\\");\\n        mouseoverEventExample();\\n        $('#cat').mouseover();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n        window.mouseoverEventHandler.restore();\\n        console.log.restore();\\n    });\\n\\n    it('should bind mouseover event handler', () => {\\n        expect(this.spyMouseOver.called).to.equal(true);\\n    });\\n\\n    it('should select the image', () => {\\n        expect(this.spyjQuery.getCall(0).returnValue.selector).to.equal('#cat');\\n    });\\n\\n    it('should console.log a message', () => {\\n        expect(this.spyConsole.callCount, \\\"Make sure you're console logging!\\\").to.equal(3);\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n    <title>repl.it</title>\\n</head>\\n\\n<body>\\n\\n    <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n\\n</body>\\n\\n</html>\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a28"}, {"title": "Events: Focus/Blur Event", "instructions": "**Exit Criteria**\n\n- Add an `<input>` element with `type` set to `\"text\"` and `id` set to `\"full-name\"`\n\n- Create a **function** called `focusEventHandler` in `main.js` in the global scope (meaning it should not be within any other function). This **function** should **log** the message `\"Input has focus\"` to the **console**.\n\n- Create a **function** called `blurEventHandler` in `main.js` also in the global scope. This **function** should **log** the message `\"Input lost focus\"` to the **console**.\n\n- Create a **function** called `focusBlurEventExample`.\n\n- Inside the `focusBlurEventExample` **function**, use jQuery to attach the `focusEventHandler` **function** to the **focus event** of the **input** element you created.\n\n- Also inside the `focusBlurEventExample` **function**, use jQuery to attach the `blurEventHandler` **function** to the **blur event** of the input element you created.\n", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spyFocus = sinon.spy(window, \\\"focusEventHandler\\\");\\n        this.spyBlur = sinon.spy(window, \\\"blurEventHandler\\\");\\n        focusBlurEventExample();\\n    });\\n\\n    afterEach(() => {\\n        window.focusEventHandler.restore();\\n        window.blurEventHandler.restore();\\n    });\\n\\n    it('should have a text input with the ID \\\"full-name\\\"', () => {\\n        expect($('input#full-name:text').length).to.equal(1);\\n    });\\n\\n    it('should bind focus event handler', () => {\\n        $('#full-name').trigger('focus');\\n        expect(this.spyFocus.called).to.equal(true);\\n    });\\n\\n    it('should bind blur event handler', () => {\\n        $('#full-name').trigger('blur');\\n        expect(this.spyBlur.called).to.equal(true);\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n  <title>repl.it</title>\\n</head>\\n\\n<body>\\n\\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n\\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a29"}, {"title": "DOM: Get/Change Content", "instructions": "**Exit Criteria**\n\n- In `index.html` create a **textarea** element with the **id** **code-editor**\n- In `index.html` create a **button** element with the **id** **run-code**\n- In `index.html` create a **div** element with the **id** **output**\n- In `main.js` create a **function** called **runCode**\n- The `runCode` **function** should read the value of the **code-editor** **textarea** element into a variable called **markup** using the `.val()` function.\n- The `runCode` function should then set the HTML of the **output** element to the value stored in the **markup** variable using the `.html()` function.\n- In the `domManipulationExample` **function**, bind the **runCode** **function** to the **click** event of the **run-code** **button** \n", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spyjQuery = sinon.spy(window, \\\"$\\\");\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n    });\\n\\n    it('should select #code-editor <textarea> element', () => {\\n        runCode();\\n        expect(this.spyjQuery.getCall(0).returnValue.selector).to.equal('#code-editor');\\n    });\\n\\n    it('should select #output div element', () => {\\n        runCode();\\n        expect(this.spyjQuery.getCall(1).returnValue.selector).to.equal('#output');\\n    });\\n\\n    it('should set html of #output to input of #code-editor', () => {\\n        domManipulationExample();\\n        var testHtml = '<div><p>Hello World</p></div>';\\n        $('textarea#code-editor').val(testHtml);\\n        $('button#run-code').click();\\n        expect($('div#output').html()).to.equal(testHtml);\\n    });\\n});\\n\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"//Write your runCode function below\\n\\n\\nfunction domManipulationExample() {\\n\\n\\n}\\n\\ndomManipulationExample();\\n\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n  <title>repl.it</title>\\n</head>\\n\\n<body>\\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a2a"}, {"title": "DOM: Inserting Elements", "instructions": "**Exit Criteria**\n\n- In `index.html` add a `<ul>` element with an **id** of **grocery-list**\n- In `index.html` add an `<input type=\"text\">` element with an **id** of **new-grocery-item**\n- In `index.html` add a `<button>` element with an **id** of **add-grocery-item**\n- In `main.js` add a **function** called **addGroceryItem**\n- The `addGroceryItem` **function** should read the contents of the **new-grocery-item** element into a variable called **newGroceryItem**\n- `addGroceryItem` should then append an `<li>` to the **#grocery-list** element where the content of this element is the value stored in **newGroceryItem**\n", "tests": "\"describe('your solution', function() {\\n    it('html should contain a <ul> element with the id \\\"grocery-list\\\"', () => {\\n        expect($('ul#grocery-list').length).to.equal(1);\\n    });\\n\\n    it('html should contain an input element with the id \\\"new-grocery-item\\\"', () => {\\n        expect($('input#new-grocery-item').length).to.equal(1);\\n    });\\n\\n    it('html should contain a button element with the id \\\"add-grocery-item\\\"', () => {\\n        expect($('button#add-grocery-item').length).to.equal(1);\\n    });\\n\\n    it('should add an item to the grocery list', () => {\\n        var spyjQuery = sinon.spy(window, \\\"$\\\");\\n        $('#new-grocery-item').text('Food');\\n        addGroceryItem();\\n        expect(spyjQuery.calledWith('#new-grocery-item')).to.equal(true);\\n        expect($('ul#grocery-list li').length).to.be.gt(0);\\n        window.$.restore();\\n    });\\n});\\n\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"// Create your addGroceryItem function here\\n\\n\\n\\n\\n// This function will bind the \\\"on click\\\" event of your button\\nfunction exampleClickHandler() {\\n    $('#add-grocery-item').click(addGroceryItem);\\n}\\nexampleClickHandler();\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n  <title>repl.it</title>\\n</head>\\n\\n<body>\\n  \\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n\\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a2b"}, {"title": "DOM: Attributes", "instructions": "**Exit Criteria**\n\n- In `main.js`, inside the `attributeExample` **function**, select all `<a>` elements that are children of an `<li>` element within `#search-engines` using jQuery.\n- Store these elements in a variable called `links`. (See example below for clarification.)\n- Iterate over the element list stored using the `$.each` **function** provided by jQuery.\n- For each link item, select the text contained inside the link, convert it to lowercase, and use it to generate a valid URL for each search engine. \n- Finally, for each link item, use the `.attr `method to set the `href` attribute to be your generated URL.\n\n\n\n**Expected Links**\n\n- Google => https://www.google.com\n- Bing => https://www.bing.com\n- Yahoo => https://www.yahoo.com\n- Ask => https://www.ask.com\n- Baidu => https://www.baidu.com\n- WolframAlpha => https://www.wolframalpha.com\n- Duck Duck Go => https://www.duckduckgo.com\n- Internet Archive => https://www.internetarchive.com\n- ChaCha.com => https://www.chacha.com\n\n**Hints**\n\n- Some search engine names contain spaces. Research and use the `.replace` method to remove spaces from the name.\n- ChaCha.com will also need to use the `.replace` method.\n\n**Example of storing selected elements**\n\n>Storing all li elements\n`var $listItems = $('li');`\n\n>Storing first li element\n`var $firstListItem = $('li:first');`\n\n**Example of iterating over a collection of elements**\n    \n`var $listItems = $('li');\n    $.each($listItems, function(i, listItem) {\n        var $listItem = $(listItem);\n        $listItem.text('List item #' + i);\n    });`", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spyjQuery = sinon.spy(window, \\\"$\\\");\\n        attributeExample();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n    });\\n\\n    it('should target all a elements that are children of an li', () => {\\n        expect(this.spyjQuery.getCall(0).returnValue.selector).to.equal('#search-engines li > a');\\n    });\\n\\n    it('should correctly generate href for each search engine', () => {\\n        var expected = {\\n            'Google': 'https://www.google.com',\\n            'Bing': 'https://www.bing.com',\\n            'Yahoo': 'https://www.yahoo.com',\\n            'Ask': 'https://www.ask.com',\\n            'Baidu': 'https://www.baidu.com',\\n            'Wolfram Alpha': 'https://www.wolframalpha.com',\\n            'Duck Duck Go': 'https://www.duckduckgo.com',\\n            'Internet Archive': 'https://www.internetarchive.com',\\n            'ChaCha.com': 'https://www.chacha.com'\\n        };\\n\\n        var links = $('#search-engines li > a');\\n\\n        $.each(links, function(i, link) {\\n        var link = $(link);\\n            expect(link.attr('href')).to.equal(expected[link.text()]);\\n        });\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function attributeExample() {\\n    // Write your code inside this function\\n\\n\\n\\n\\n\\n}\\nattributeExample();\""}, {"type": "css", "content": "\"\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\\\"utf-8\\\">\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n<title>repl.it</title>\\n</head>\\n<body>\\n\\n  <h1>Search Engines</h1>\\n  <ul id=\\\"search-engines\\\">\\n    <li>\\n      <a href=\\\"\\\">Google</a>\\n    </li>\\n    <li>\\n      <a href=\\\"\\\">Bing</a>\\n    </li>\\n    <li>\\n      <a href=\\\"\\\">Yahoo</a>\\n    </li>\\n    <li>\\n      <a href=\\\"\\\">Ask</a>\\n    </li>\\n    <li>\\n      <a href=\\\"\\\">Baidu</a>\\n    </li>\\n    <li>\\n      <a href=\\\"\\\">Wolfram Alpha</a>\\n    </li>\\n    <li>\\n      <a href=\\\"\\\">Duck Duck Go</a>\\n    </li>\\n    <li>\\n      <a href=\\\"\\\">Internet Archive</a>\\n    </li>\\n    <li>\\n      <a href=\\\"\\\">ChaCha.com</a>\\n    </li>\\n  </ul>\\n  \\n  <a href=\\\"https://www.reliablesoft.net/top-10-search-engines-in-the-world/\\\">Source</a>\\n  \\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n\\n</body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a2c"}, {"title": "Effects: Basic", "instructions": "**Exit Criteria**\n\n- Hide the first box using jQuery\n- Show the second box using jQuery\n- Toggle the visibility of the third box every 1000ms using the `setInterval `function.\n\n**Constraint**\n\n- You may not modify index.html \n", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spyjQuery = sinon.spy(window, '$');\\n        this.spyInterval = sinon.spy(window, 'setInterval');\\n        basicEffects();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n        window.setInterval.restore();\\n    });\\n\\n    it('box one should be hidden', () => {\\n        expect($('.box:first').is(':hidden')).to.equal(true);\\n    });\\n    it('box two should be visible', () => {\\n        expect($('.box:nth-of-type(2)').is(':visible')).to.equal(true);\\n    });\\n    it('box three should toggle every 1000ms', () => {\\n        expect(this.spyInterval.callCount).to.equal(1);\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function basicEffects() {\\n    //Write your code inside this function\\n\\n\\n\\n}\\n\\nbasicEffects();\""}, {"type": "css", "content": "\".box {\\n  width: 100px;\\n  height: 100px;\\n  border: 1px solid gray;\\n  display: inline-block;\\n}\\n\\n.box:nth-of-type(1) {\\n  background-color: red;\\n}\\n.box:nth-of-type(2) {\\n  background-color: green;\\n}\\n.box:nth-of-type(3) {\\n  background-color: blue;\\n}\\n\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\\\"utf-8\\\">\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n<title>repl.it</title>\\n</head>\\n<body>\\n  \\n  <div class=\\\"box\\\"></div>\\n  <div class=\\\"box\\\" style=\\\"display:none\\\"></div>\\n  <div class=\\\"box\\\"></div>\\n\\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n\\n</body>\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a2d"}, {"title": "Effects: Sliding", "instructions": "**Exit Criteria**\n\n- After 0ms, make the section with an id of game-scene slide down using the `slideDown` function in jQuery.\n- After 1000ms, make the divs with ids player-one and player-two slide down using the `slideDown `function in jQuery.\n- After 1500ms, make the divs with ids player-one and player-two slide up using the `slideUp `function in jQuery.\n- After 3000ms, make the game-scene element slide up by using the `slideToggle` function in jQuery.\n\n\u200b\n\n**Hint**\n\nUse the `.delay `function in jQuery to make sure animations happen in the right order.\n", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spyjQuery = sinon.spy(window, '$');\\n        this.spySlideUp = sinon.spy($.fn, 'slideUp');\\n        this.spySlideDown = sinon.spy($.fn, 'slideDown');\\n        this.spySlideToggle = sinon.spy($.fn, 'slideToggle');\\n        this.spyDelay = sinon.spy($.fn, 'delay');\\n\\n        slidingExample();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n        $.fn.slideUp.restore();\\n        $.fn.slideDown.restore();\\n        $.fn.slideToggle.restore();\\n        $.fn.delay.restore();\\n    });\\n\\n    it('#game-scene should slide down', () => {\\n        expect(this.spyjQuery.calledWith('#game-scene')).to.equal(true);\\n        expect(this.spySlideDown.callCount).to.be.gt(0);\\n    });\\n\\n    it('#player-one and #player-two should slide down after 1000ms', () => {\\n        expect(this.spyjQuery.calledWith('#player-one, #player-two')).to.equal(true);\\n        expect(this.spyDelay.calledWith(1000)).to.equal(true);\\n        expect(this.spySlideDown.callCount).to.be.gt(1);\\n    });\\n\\n    it('should_slide_up_players', () => {\\n        expect(this.spyjQuery.calledWith('#player-one, #player-two')).to.equal(true);\\n        expect(this.spyDelay.calledWith(1500)).to.equal(true);\\n        expect(this.spySlideUp.callCount).to.be.gt(0);\\n    });\\n\\n    it('should_slide_up_game_scene', () => {\\n        expect(this.spyjQuery.calledWith('#game-scene')).to.equal(true);\\n        expect(this.spyDelay.calledWith(3000)).to.equal(true);\\n        expect(this.spySlideToggle.callCount).to.be.gt(0);\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function slidingExample() {\\n    // Write your code within this function\\n\\n\\n\\n\\n}\\nslidingExample();\""}, {"type": "css", "content": "\".game-wrapper {\\n    height: 224px;\\n}\\n\\n#game-scene {\\n  position: absolute;\\n  height: 224px;\\n  width: 621px;\\n  background-image: url(http://www.slateman.net/images/gaming/backgrounds/sf2st-blanka.gif);\\n}\\n\\n#player-one {\\n  position: absolute;\\n  height: 110px;\\n  width: 81px;\\n  background-image: url(http://i.imgur.com/HzG8ys3.png);\\n  top: 100px;\\n  left: 200px;\\n}\\n\\n#player-two {\\n  position: absolute;\\n  height: 110px;\\n  width: 81px;\\n  background-image: url(http://i.imgur.com/iwQoUqh.png);\\n  top: 100px;\\n  right: 200px;\\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n  <meta charset=\\\"utf-8\\\">\\n  <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n  <title>repl.it</title>\\n</head>\\n\\n<body>\\n  \\n  <div class=\\\"game-wrapper\\\">\\n    <div id=\\\"game-scene\\\" style=\\\"display: none;\\\">\\n      <div id=\\\"player-one\\\" style=\\\"display: none;\\\"></div>\\n      <div id=\\\"player-two\\\" style=\\\"display: none;\\\"></div>\\n    </div>\\n  </div>\\n\\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n\\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a2e"}, {"title": "Effects: Fading", "instructions": "**Exit Criteria**\n\n- Fade in all squares using jQuery\n- Fade in all circles using jQuery\n- Fade all shapes to an opacity of 0.5 using the `.fadeTo` function in jQuery\n- Fade all shapes to an opacity of 1 using the `.fadeTo `function in jQuery\n- Using the `setInterval` function, make all shapes toggle visibility every 1000ms using the `.fadeToggle `function in jQuery\n", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spyjQuery = sinon.spy(window, '$');\\n        this.spyFadeIn = sinon.spy($.fn, 'fadeIn');\\n        this.spyFadeTo = sinon.spy($.fn, 'fadeTo');\\n        this.spyFadeToggle = sinon.spy(window, 'setInterval');\\n\\n        // Valid selectors\\n        this.valid = ['.circle, .square', '.square, .circle', '.circle,.square', '.square,.circle'];\\n        fadeExamples();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n        $.fn.fadeIn.restore();\\n        $.fn.fadeTo.restore();\\n        window.setInterval.restore();\\n    });\\n\\n    it('all squares should fade in', () => {\\n        expect(this.spyjQuery.calledWith('.square')).to.equal(true);\\n        expect(this.spyFadeIn.callCount).to.be.gt(0);\\n    });\\n\\n    it('all circles should fade in', () => {\\n        expect(this.spyjQuery.calledWith('.circle')).to.equal(true);\\n        expect(this.spyFadeIn.callCount).to.be.gt(0);\\n    });\\n\\n    it('all shapes should fade to 0.5 opacity', () => {\\n        expect(this.spyjQuery.args, \\\"Be sure to target .square and .circle elements in one line\\\").to.satisfy(a => a.some(s => ~this.valid.indexOf(s[0])));\\n        expect(String(this.spyFadeTo.args[0][1]), 'The function .fadeTo() takes two arguments, the speed of the animation, and the opacity value').to.contain(0.5);\\n        expect(this.spyFadeTo.callCount).to.be.gt(0);\\n    });\\n\\n    it('all shapes should fade to full opacity', () => {\\n        expect(this.spyjQuery.args, \\\"Be sure to target .square and .circle elements in one line\\\").to.satisfy(a => a.some(s => ~this.valid.indexOf(s[0])));\\n        expect(String(this.spyFadeTo.args[1][1]), 'The function .fadeTo() takes two arguments, the speed of the animation, and the opacity value').to.contain(1);\\n        expect(this.spyFadeTo.callCount).to.be.gt(0);\\n    });\\n\\n    it('all shapes should toggle visibility every 1000ms', () => {\\n        expect(this.spyjQuery.args, \\\"Be sure to target .square and .circle elements in one line\\\").to.satisfy(a => a.some(s => ~this.valid.indexOf(s[0])));\\n        expect(this.spyFadeToggle.callCount).to.be.gt(0);\\n    });\\n});\"", "timeEstimate": 10, "type": "CODE", "files": [{"type": "js", "content": "\"function fadeExamples() {\\n    // Write your code within this function\\n\\n\\n\\n\\n}\\nfadeExamples();\""}, {"type": "css", "content": "\".square {\\n  height: 100px;\\n  width: 100px;\\n  background-color: blue;\\n  display: inline-block;\\n}\\n\\n.circle {\\n  height: 100px;\\n  width: 100px;\\n  border-radius: 100px;\\n  display: inline-block;\\n  background-color: green;\\n}\""}, {"type": "html", "content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n    <title>repl.it</title>\\n</head>\\n\\n<body>\\n  \\n  <section id=\\\"row-one\\\">\\n    <div class=\\\"square\\\" style=\\\"display: none\\\"></div>\\n    <div class=\\\"circle\\\" style=\\\"display: none\\\"></div>\\n    <div class=\\\"square\\\" style=\\\"display: none\\\"></div>\\n  </section>\\n  \\n  <section id=\\\"row-two\\\">\\n    <div class=\\\"circle\\\" style=\\\"display: none\\\"></div>\\n    <div class=\\\"square\\\" style=\\\"display: none\\\"></div>\\n    <div class=\\\"circle\\\" style=\\\"display: none\\\"></div>\\n  </section>\\n  \\n  <section id=\\\"row-two\\\">\\n    <div class=\\\"square\\\" style=\\\"display: none\\\"></div>\\n    <div class=\\\"circle\\\" style=\\\"display: none\\\"></div>\\n    <div class=\\\"square\\\" style=\\\"display: none\\\"></div>\\n  </section>\\n  \\n  \\n  \\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n\\n</body>\\n\\n</html>\""}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a2f"}, {"title": "AJAX: $.ajax", "instructions": "**Exit Criteria**\n\n- Create a function called `convertCurrency` - in this function, make an HTTP GET request to the following URL using `$.ajax:` `https://api.exchangeratesapi.io/latest?base=USD`\n- The success callback function of your AJAX call should receive as a named parameter a JavaScript object containing the latest exchange rates from USD to various currencies. This parameter should be named `data`.\n- In this callback, use dot notation syntax to store the exchange rate from USD to GBP into a variable called `exchange_rate`.\n- Next in this callback, set the value of the `gbp-output `element to the USD amount entered by the user as a product of `exchange_rate`.\n- Lastly in this callback, fade out the `initial-message` element using `.fadeOut`.\n- Inside the `convertCurrencyHandler` function, bind the click event of the `convert-currency `button to the `convertCurrency `function.\n", "tests": "\"describe('your solution', function() {\\n   beforeEach(() => {\\nthis.spyjQuery = sinon.spy(window, '$');\\nconvertCurrency();\\n   });\\n\\n   afterEach(() => {\\nwindow.$.restore();\\n   });\\n\\n  it('should convert currency correctly using ajax', async () => {\\n  convertCurrencyHandler();\\n  let results = null;\\n\\n  $('#usd-input').val('100');\\n  $('#convert-currency').trigger('click');\\n  await $.ajax({\\n      url: 'https://exchangeratesapi.io/api/latest?base=USD',\\n      method: 'GET',\\n      success: function(data) {\\n          results = Object.assign({}, data);\\n      }\\n  })\\n\\n    expect($('#gbp-output').val()).to.equal((results.rates.GBP * 100).toString());\\n   });\\n});\"", "timeEstimate": 10, "published": "2017-11-01T17:18:25.155Z", "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n    <title>repl.it</title>\\n</head>\\n\\n<body>\\n  \\n  <p id=\\\"initial-message\\\">Enter an amount in USD and press the convert button to see the value of the USD currency vs the GBP.</p>\\n  \\n  <input type=\\\"text\\\" id=\\\"usd-input\\\" placeholder=\\\"USD ($)\\\" />\\n  <button id=\\\"convert-currency\\\">Convert to GBP</button>\\n  <input type=\\\"text\\\" id=\\\"gbp-output\\\" placeholder=\\\"GBP (\u00a3)\\\" disabled />\\n\\n  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js'></script>\\n\\n</body>\\n\\n</html>\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"// Create your new function here\\n\\nfunction convertCurrencyHandler() {\\n    // Bind the click event within this function\\n\\n}\\nconvertCurrencyHandler();\\n\\n/*\\n**Example Code**\\n\\n    $.ajax({\\n       type: 'GET',\\n       url: 'https://api.exchangeratesapi.io/latest?base=USD',\\n       success: function(data) {\\n          // the data ^parameter^ above contains the response from the URL.\\n       }\\n    });\\n*/\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a30"}, {"title": "AJAX: $.getJSON", "instructions": "**Exit Criteria**\n\n- Create a `<button>` element with an id of `download-bacon`.\n- Add a click event handler to this button element using jQuery.\n- Inside the click event handler function, use `$.getJSON `to request the content of the following URL: **https://origin-bacon.herokuapp.com/**\n- In the callback function provided to $.getJSON, set the content of the `<pre>` element to be the response of the request using the `.text` function in jQuery.\n", "tests": "\"describe('your solution', function() {\\n    beforeEach(() => {\\n        this.spyjQuery = sinon.spy(window, '$');\\n        this.spyJSON = sinon.spy($, 'getJSON');\\n        exampleClickHandler();\\n    });\\n\\n    afterEach(() => {\\n        window.$.restore();\\n    });\\n\\n    it('should_call_getjson_function', () => {\\n        $('button#download-bacon').trigger('click');\\n        expect(this.spyJSON.calledWith('https://origin-bacon.herokuapp.com/')).to.equal(true);\\n    });\\n\\n    it('should_have_a_button_with_id_download_bacon', () => {\\n        expect($('button#download-bacon').length).to.equal(1);\\n    });\\n});\"", "timeEstimate": 10, "published": "2017-11-01T17:18:25.155Z", "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n    <title>repl.it</title>\\n  </head>\\n  <body>\\n    \\n    <pre id=\\\"output\\\"></pre>\\n    \\n    <script src=\\\"https://code.jquery.com/jquery-3.2.1.min.js\\\"></script>\\n    \\n  </body>\\n</html>\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"function exampleClickHandler() {\\n    // Write your code within this function\\n\\n}\\nexampleClickHandler();\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a31"}, {"title": "AJAX: HTTP POST", "instructions": "**Origin Message Board**\n\nIn this exercise you will be using the `$.ajax `function to POST a message to the Origin Wall - a web application we have setup for Origin students to leave messages for future cohorts. Take this chance to offer advice or say something motivational for future students!\n\nYou can see the Origin Wall here: https://originmessages.herokuapp.com/\n\n**Exit Criteria**\n\n- Add an input element with the name attribute set to \"username\"\n- Add a textarea element with the name attribute set to \"message\"\n- Add a button element with an id of `send-message`\n- Bind a function to the click event of this button element\n- In the event handler (i.e. when the user clicks the button), grab the values of the input elements using `.val` (you will want to store these in two separate variables).\n- Create an object with the properties `username` and `message` and set their values to the matching input values.\n- Use the `$.ajax` method to POST the object containing these two values to the following url: **https://originmessages.herokuapp.com/messages/.**\n- Fill out the form, click the button and leave a message!\n\n**Helpful Links**\n\n- Check out $.ajax in the jQuery documentation first to get a feel for how to send HTTP POST requests.\n- Check out this article if you are able to POST a message, but neither the name nor the message show on the app. https://stackoverflow.com/questions/16498256/posting-json-to-express-using-jquery\n", "tests": "\"describe('your solution', function() {\\n  it('should_contain_an_input_for_username', () => {\\n    // expect($('input[name=username]').length).to.equal(1);\\n    expect(true).to.equal(true);\\n  });\\n  it('should_contain_a_text_area_for_message', () => {\\n    expect($('textarea[name=message]').length).to.equal(1);\\n  });\\n  it('should_contain_a_button_with_id_send_message', () => {\\n    expect($('button#send-message').length).to.equal(1);\\n  });\\n});\"", "timeEstimate": 10, "published": "2017-11-01T17:18:25.155Z", "type": "CODE", "files": [{"content": "\"<!DOCTYPE html>\\n<html>\\n<head>\\n<meta charset=\\\"utf-8\\\">\\n<meta name=\\\"viewport\\\" content=\\\"width=device-width\\\">\\n<title>repl.it</title>\\n</head>\\n<body>\\n\\n  <script src=\\\"https://code.jquery.com/jquery-3.2.1.min.js\\\"></script>\\n\\n</body>\\n</html>\"", "type": "html"}, {"content": "\"\"", "type": "css"}, {"content": "\"\"", "type": "js"}], "difficulty": 1, "id": "5c4768c3b5bf0ae884977a32"}]